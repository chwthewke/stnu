////////////////////////////////////////
// GENERATED, DO NOT EDIT
//  see GenBulmaClasses

package net.chwthewke.stnu
package spa
package css

trait PhosphorIcons[A]:
  def tcls( tpe: String, name: String ): A  

  trait Common:
    protected def cls( name: String ): A
    val `acorn`: A = cls( "acorn" )
    val `addressBook`: A = cls( "address-book" )
    val `addressBookTabs`: A = cls( "address-book-tabs" )
    val `airTrafficControl`: A = cls( "air-traffic-control" )
    val `airplane`: A = cls( "airplane" )
    val `airplaneInFlight`: A = cls( "airplane-in-flight" )
    val `airplaneLanding`: A = cls( "airplane-landing" )
    val `airplaneTakeoff`: A = cls( "airplane-takeoff" )
    val `airplaneTaxiing`: A = cls( "airplane-taxiing" )
    val `airplaneTilt`: A = cls( "airplane-tilt" )
    val `airplay`: A = cls( "airplay" )
    val `alarm`: A = cls( "alarm" )
    val `alien`: A = cls( "alien" )
    val `alignBottom`: A = cls( "align-bottom" )
    val `alignBottomSimple`: A = cls( "align-bottom-simple" )
    val `alignCenterHorizontal`: A = cls( "align-center-horizontal" )
    val `alignCenterHorizontalSimple`: A = cls( "align-center-horizontal-simple" )
    val `alignCenterVertical`: A = cls( "align-center-vertical" )
    val `alignCenterVerticalSimple`: A = cls( "align-center-vertical-simple" )
    val `alignLeft`: A = cls( "align-left" )
    val `alignLeftSimple`: A = cls( "align-left-simple" )
    val `alignRight`: A = cls( "align-right" )
    val `alignRightSimple`: A = cls( "align-right-simple" )
    val `alignTop`: A = cls( "align-top" )
    val `alignTopSimple`: A = cls( "align-top-simple" )
    val `amazonLogo`: A = cls( "amazon-logo" )
    val `ambulance`: A = cls( "ambulance" )
    val `anchor`: A = cls( "anchor" )
    val `anchorSimple`: A = cls( "anchor-simple" )
    val `androidLogo`: A = cls( "android-logo" )
    val `angle`: A = cls( "angle" )
    val `angularLogo`: A = cls( "angular-logo" )
    val `aperture`: A = cls( "aperture" )
    val `appStoreLogo`: A = cls( "app-store-logo" )
    val `appWindow`: A = cls( "app-window" )
    val `appleLogo`: A = cls( "apple-logo" )
    val `applePodcastsLogo`: A = cls( "apple-podcasts-logo" )
    val `approximateEquals`: A = cls( "approximate-equals" )
    val `archive`: A = cls( "archive" )
    val `armchair`: A = cls( "armchair" )
    val `arrowArcLeft`: A = cls( "arrow-arc-left" )
    val `arrowArcRight`: A = cls( "arrow-arc-right" )
    val `arrowBendDoubleUpLeft`: A = cls( "arrow-bend-double-up-left" )
    val `arrowBendDoubleUpRight`: A = cls( "arrow-bend-double-up-right" )
    val `arrowBendDownLeft`: A = cls( "arrow-bend-down-left" )
    val `arrowBendDownRight`: A = cls( "arrow-bend-down-right" )
    val `arrowBendLeftDown`: A = cls( "arrow-bend-left-down" )
    val `arrowBendLeftUp`: A = cls( "arrow-bend-left-up" )
    val `arrowBendRightDown`: A = cls( "arrow-bend-right-down" )
    val `arrowBendRightUp`: A = cls( "arrow-bend-right-up" )
    val `arrowBendUpLeft`: A = cls( "arrow-bend-up-left" )
    val `arrowBendUpRight`: A = cls( "arrow-bend-up-right" )
    val `arrowCircleDown`: A = cls( "arrow-circle-down" )
    val `arrowCircleDownLeft`: A = cls( "arrow-circle-down-left" )
    val `arrowCircleDownRight`: A = cls( "arrow-circle-down-right" )
    val `arrowCircleLeft`: A = cls( "arrow-circle-left" )
    val `arrowCircleRight`: A = cls( "arrow-circle-right" )
    val `arrowCircleUp`: A = cls( "arrow-circle-up" )
    val `arrowCircleUpLeft`: A = cls( "arrow-circle-up-left" )
    val `arrowCircleUpRight`: A = cls( "arrow-circle-up-right" )
    val `arrowClockwise`: A = cls( "arrow-clockwise" )
    val `arrowCounterClockwise`: A = cls( "arrow-counter-clockwise" )
    val `arrowDown`: A = cls( "arrow-down" )
    val `arrowDownLeft`: A = cls( "arrow-down-left" )
    val `arrowDownRight`: A = cls( "arrow-down-right" )
    val `arrowElbowDownLeft`: A = cls( "arrow-elbow-down-left" )
    val `arrowElbowDownRight`: A = cls( "arrow-elbow-down-right" )
    val `arrowElbowLeft`: A = cls( "arrow-elbow-left" )
    val `arrowElbowLeftDown`: A = cls( "arrow-elbow-left-down" )
    val `arrowElbowLeftUp`: A = cls( "arrow-elbow-left-up" )
    val `arrowElbowRight`: A = cls( "arrow-elbow-right" )
    val `arrowElbowRightDown`: A = cls( "arrow-elbow-right-down" )
    val `arrowElbowRightUp`: A = cls( "arrow-elbow-right-up" )
    val `arrowElbowUpLeft`: A = cls( "arrow-elbow-up-left" )
    val `arrowElbowUpRight`: A = cls( "arrow-elbow-up-right" )
    val `arrowFatDown`: A = cls( "arrow-fat-down" )
    val `arrowFatLeft`: A = cls( "arrow-fat-left" )
    val `arrowFatLineDown`: A = cls( "arrow-fat-line-down" )
    val `arrowFatLineLeft`: A = cls( "arrow-fat-line-left" )
    val `arrowFatLineRight`: A = cls( "arrow-fat-line-right" )
    val `arrowFatLineUp`: A = cls( "arrow-fat-line-up" )
    val `arrowFatLinesDown`: A = cls( "arrow-fat-lines-down" )
    val `arrowFatLinesLeft`: A = cls( "arrow-fat-lines-left" )
    val `arrowFatLinesRight`: A = cls( "arrow-fat-lines-right" )
    val `arrowFatLinesUp`: A = cls( "arrow-fat-lines-up" )
    val `arrowFatRight`: A = cls( "arrow-fat-right" )
    val `arrowFatUp`: A = cls( "arrow-fat-up" )
    val `arrowLeft`: A = cls( "arrow-left" )
    val `arrowLineDown`: A = cls( "arrow-line-down" )
    val `arrowLineDownLeft`: A = cls( "arrow-line-down-left" )
    val `arrowLineDownRight`: A = cls( "arrow-line-down-right" )
    val `arrowLineLeft`: A = cls( "arrow-line-left" )
    val `arrowLineRight`: A = cls( "arrow-line-right" )
    val `arrowLineUp`: A = cls( "arrow-line-up" )
    val `arrowLineUpLeft`: A = cls( "arrow-line-up-left" )
    val `arrowLineUpRight`: A = cls( "arrow-line-up-right" )
    val `arrowRight`: A = cls( "arrow-right" )
    val `arrowSquareDown`: A = cls( "arrow-square-down" )
    val `arrowSquareDownLeft`: A = cls( "arrow-square-down-left" )
    val `arrowSquareDownRight`: A = cls( "arrow-square-down-right" )
    val `arrowSquareIn`: A = cls( "arrow-square-in" )
    val `arrowSquareLeft`: A = cls( "arrow-square-left" )
    val `arrowSquareOut`: A = cls( "arrow-square-out" )
    val `arrowSquareRight`: A = cls( "arrow-square-right" )
    val `arrowSquareUp`: A = cls( "arrow-square-up" )
    val `arrowSquareUpLeft`: A = cls( "arrow-square-up-left" )
    val `arrowSquareUpRight`: A = cls( "arrow-square-up-right" )
    val `arrowUDownLeft`: A = cls( "arrow-u-down-left" )
    val `arrowUDownRight`: A = cls( "arrow-u-down-right" )
    val `arrowULeftDown`: A = cls( "arrow-u-left-down" )
    val `arrowULeftUp`: A = cls( "arrow-u-left-up" )
    val `arrowURightDown`: A = cls( "arrow-u-right-down" )
    val `arrowURightUp`: A = cls( "arrow-u-right-up" )
    val `arrowUUpLeft`: A = cls( "arrow-u-up-left" )
    val `arrowUUpRight`: A = cls( "arrow-u-up-right" )
    val `arrowUp`: A = cls( "arrow-up" )
    val `arrowUpLeft`: A = cls( "arrow-up-left" )
    val `arrowUpRight`: A = cls( "arrow-up-right" )
    val `arrowsClockwise`: A = cls( "arrows-clockwise" )
    val `arrowsCounterClockwise`: A = cls( "arrows-counter-clockwise" )
    val `arrowsDownUp`: A = cls( "arrows-down-up" )
    val `arrowsHorizontal`: A = cls( "arrows-horizontal" )
    val `arrowsIn`: A = cls( "arrows-in" )
    val `arrowsInCardinal`: A = cls( "arrows-in-cardinal" )
    val `arrowsInLineHorizontal`: A = cls( "arrows-in-line-horizontal" )
    val `arrowsInLineVertical`: A = cls( "arrows-in-line-vertical" )
    val `arrowsInSimple`: A = cls( "arrows-in-simple" )
    val `arrowsLeftRight`: A = cls( "arrows-left-right" )
    val `arrowsMerge`: A = cls( "arrows-merge" )
    val `arrowsOut`: A = cls( "arrows-out" )
    val `arrowsOutCardinal`: A = cls( "arrows-out-cardinal" )
    val `arrowsOutLineHorizontal`: A = cls( "arrows-out-line-horizontal" )
    val `arrowsOutLineVertical`: A = cls( "arrows-out-line-vertical" )
    val `arrowsOutSimple`: A = cls( "arrows-out-simple" )
    val `arrowsSplit`: A = cls( "arrows-split" )
    val `arrowsVertical`: A = cls( "arrows-vertical" )
    val `article`: A = cls( "article" )
    val `articleMedium`: A = cls( "article-medium" )
    val `articleNyTimes`: A = cls( "article-ny-times" )
    val `asclepius`: A = cls( "asclepius" )
    val `asterisk`: A = cls( "asterisk" )
    val `asteriskSimple`: A = cls( "asterisk-simple" )
    val `at`: A = cls( "at" )
    val `atom`: A = cls( "atom" )
    val `avocado`: A = cls( "avocado" )
    val `axe`: A = cls( "axe" )
    val `baby`: A = cls( "baby" )
    val `babyCarriage`: A = cls( "baby-carriage" )
    val `backpack`: A = cls( "backpack" )
    val `backspace`: A = cls( "backspace" )
    val `bag`: A = cls( "bag" )
    val `bagSimple`: A = cls( "bag-simple" )
    val `balloon`: A = cls( "balloon" )
    val `bandaids`: A = cls( "bandaids" )
    val `bank`: A = cls( "bank" )
    val `barbell`: A = cls( "barbell" )
    val `barcode`: A = cls( "barcode" )
    val `barn`: A = cls( "barn" )
    val `barricade`: A = cls( "barricade" )
    val `baseball`: A = cls( "baseball" )
    val `baseballCap`: A = cls( "baseball-cap" )
    val `baseballHelmet`: A = cls( "baseball-helmet" )
    val `basket`: A = cls( "basket" )
    val `basketball`: A = cls( "basketball" )
    val `bathtub`: A = cls( "bathtub" )
    val `batteryCharging`: A = cls( "battery-charging" )
    val `batteryChargingVertical`: A = cls( "battery-charging-vertical" )
    val `batteryEmpty`: A = cls( "battery-empty" )
    val `batteryFull`: A = cls( "battery-full" )
    val `batteryHigh`: A = cls( "battery-high" )
    val `batteryLow`: A = cls( "battery-low" )
    val `batteryMedium`: A = cls( "battery-medium" )
    val `batteryPlus`: A = cls( "battery-plus" )
    val `batteryPlusVertical`: A = cls( "battery-plus-vertical" )
    val `batteryVerticalEmpty`: A = cls( "battery-vertical-empty" )
    val `batteryVerticalFull`: A = cls( "battery-vertical-full" )
    val `batteryVerticalHigh`: A = cls( "battery-vertical-high" )
    val `batteryVerticalLow`: A = cls( "battery-vertical-low" )
    val `batteryVerticalMedium`: A = cls( "battery-vertical-medium" )
    val `batteryWarning`: A = cls( "battery-warning" )
    val `batteryWarningVertical`: A = cls( "battery-warning-vertical" )
    val `beachBall`: A = cls( "beach-ball" )
    val `beanie`: A = cls( "beanie" )
    val `bed`: A = cls( "bed" )
    val `beerBottle`: A = cls( "beer-bottle" )
    val `beerStein`: A = cls( "beer-stein" )
    val `behanceLogo`: A = cls( "behance-logo" )
    val `bell`: A = cls( "bell" )
    val `bellRinging`: A = cls( "bell-ringing" )
    val `bellSimple`: A = cls( "bell-simple" )
    val `bellSimpleRinging`: A = cls( "bell-simple-ringing" )
    val `bellSimpleSlash`: A = cls( "bell-simple-slash" )
    val `bellSimpleZ`: A = cls( "bell-simple-z" )
    val `bellSlash`: A = cls( "bell-slash" )
    val `bellZ`: A = cls( "bell-z" )
    val `belt`: A = cls( "belt" )
    val `bezierCurve`: A = cls( "bezier-curve" )
    val `bicycle`: A = cls( "bicycle" )
    val `binary`: A = cls( "binary" )
    val `binoculars`: A = cls( "binoculars" )
    val `biohazard`: A = cls( "biohazard" )
    val `bird`: A = cls( "bird" )
    val `blueprint`: A = cls( "blueprint" )
    val `bluetooth`: A = cls( "bluetooth" )
    val `bluetoothConnected`: A = cls( "bluetooth-connected" )
    val `bluetoothSlash`: A = cls( "bluetooth-slash" )
    val `bluetoothX`: A = cls( "bluetooth-x" )
    val `boat`: A = cls( "boat" )
    val `bomb`: A = cls( "bomb" )
    val `bone`: A = cls( "bone" )
    val `book`: A = cls( "book" )
    val `bookBookmark`: A = cls( "book-bookmark" )
    val `bookOpen`: A = cls( "book-open" )
    val `bookOpenText`: A = cls( "book-open-text" )
    val `bookOpenUser`: A = cls( "book-open-user" )
    val `bookmark`: A = cls( "bookmark" )
    val `bookmarkSimple`: A = cls( "bookmark-simple" )
    val `bookmarks`: A = cls( "bookmarks" )
    val `bookmarksSimple`: A = cls( "bookmarks-simple" )
    val `books`: A = cls( "books" )
    val `boot`: A = cls( "boot" )
    val `boules`: A = cls( "boules" )
    val `boundingBox`: A = cls( "bounding-box" )
    val `bowlFood`: A = cls( "bowl-food" )
    val `bowlSteam`: A = cls( "bowl-steam" )
    val `bowlingBall`: A = cls( "bowling-ball" )
    val `boxArrowDown`: A = cls( "box-arrow-down" )
    val `boxArrowUp`: A = cls( "box-arrow-up" )
    val `boxingGlove`: A = cls( "boxing-glove" )
    val `bracketsAngle`: A = cls( "brackets-angle" )
    val `bracketsCurly`: A = cls( "brackets-curly" )
    val `bracketsRound`: A = cls( "brackets-round" )
    val `bracketsSquare`: A = cls( "brackets-square" )
    val `brain`: A = cls( "brain" )
    val `brandy`: A = cls( "brandy" )
    val `bread`: A = cls( "bread" )
    val `bridge`: A = cls( "bridge" )
    val `briefcase`: A = cls( "briefcase" )
    val `briefcaseMetal`: A = cls( "briefcase-metal" )
    val `broadcast`: A = cls( "broadcast" )
    val `broom`: A = cls( "broom" )
    val `browser`: A = cls( "browser" )
    val `browsers`: A = cls( "browsers" )
    val `bug`: A = cls( "bug" )
    val `bugBeetle`: A = cls( "bug-beetle" )
    val `bugDroid`: A = cls( "bug-droid" )
    val `building`: A = cls( "building" )
    val `buildingApartment`: A = cls( "building-apartment" )
    val `buildingOffice`: A = cls( "building-office" )
    val `buildings`: A = cls( "buildings" )
    val `bulldozer`: A = cls( "bulldozer" )
    val `bus`: A = cls( "bus" )
    val `butterfly`: A = cls( "butterfly" )
    val `cableCar`: A = cls( "cable-car" )
    val `cactus`: A = cls( "cactus" )
    val `cake`: A = cls( "cake" )
    val `calculator`: A = cls( "calculator" )
    val `calendar`: A = cls( "calendar" )
    val `calendarBlank`: A = cls( "calendar-blank" )
    val `calendarCheck`: A = cls( "calendar-check" )
    val `calendarDot`: A = cls( "calendar-dot" )
    val `calendarDots`: A = cls( "calendar-dots" )
    val `calendarHeart`: A = cls( "calendar-heart" )
    val `calendarMinus`: A = cls( "calendar-minus" )
    val `calendarPlus`: A = cls( "calendar-plus" )
    val `calendarSlash`: A = cls( "calendar-slash" )
    val `calendarStar`: A = cls( "calendar-star" )
    val `calendarX`: A = cls( "calendar-x" )
    val `callBell`: A = cls( "call-bell" )
    val `camera`: A = cls( "camera" )
    val `cameraPlus`: A = cls( "camera-plus" )
    val `cameraRotate`: A = cls( "camera-rotate" )
    val `cameraSlash`: A = cls( "camera-slash" )
    val `campfire`: A = cls( "campfire" )
    val `car`: A = cls( "car" )
    val `carBattery`: A = cls( "car-battery" )
    val `carProfile`: A = cls( "car-profile" )
    val `carSimple`: A = cls( "car-simple" )
    val `cardholder`: A = cls( "cardholder" )
    val `cards`: A = cls( "cards" )
    val `cardsThree`: A = cls( "cards-three" )
    val `caretCircleDoubleDown`: A = cls( "caret-circle-double-down" )
    val `caretCircleDoubleLeft`: A = cls( "caret-circle-double-left" )
    val `caretCircleDoubleRight`: A = cls( "caret-circle-double-right" )
    val `caretCircleDoubleUp`: A = cls( "caret-circle-double-up" )
    val `caretCircleDown`: A = cls( "caret-circle-down" )
    val `caretCircleLeft`: A = cls( "caret-circle-left" )
    val `caretCircleRight`: A = cls( "caret-circle-right" )
    val `caretCircleUp`: A = cls( "caret-circle-up" )
    val `caretCircleUpDown`: A = cls( "caret-circle-up-down" )
    val `caretDoubleDown`: A = cls( "caret-double-down" )
    val `caretDoubleLeft`: A = cls( "caret-double-left" )
    val `caretDoubleRight`: A = cls( "caret-double-right" )
    val `caretDoubleUp`: A = cls( "caret-double-up" )
    val `caretDown`: A = cls( "caret-down" )
    val `caretLeft`: A = cls( "caret-left" )
    val `caretLineDown`: A = cls( "caret-line-down" )
    val `caretLineLeft`: A = cls( "caret-line-left" )
    val `caretLineRight`: A = cls( "caret-line-right" )
    val `caretLineUp`: A = cls( "caret-line-up" )
    val `caretRight`: A = cls( "caret-right" )
    val `caretUp`: A = cls( "caret-up" )
    val `caretUpDown`: A = cls( "caret-up-down" )
    val `carrot`: A = cls( "carrot" )
    val `cashRegister`: A = cls( "cash-register" )
    val `cassetteTape`: A = cls( "cassette-tape" )
    val `castleTurret`: A = cls( "castle-turret" )
    val `cat`: A = cls( "cat" )
    val `cellSignalFull`: A = cls( "cell-signal-full" )
    val `cellSignalHigh`: A = cls( "cell-signal-high" )
    val `cellSignalLow`: A = cls( "cell-signal-low" )
    val `cellSignalMedium`: A = cls( "cell-signal-medium" )
    val `cellSignalNone`: A = cls( "cell-signal-none" )
    val `cellSignalSlash`: A = cls( "cell-signal-slash" )
    val `cellSignalX`: A = cls( "cell-signal-x" )
    val `cellTower`: A = cls( "cell-tower" )
    val `certificate`: A = cls( "certificate" )
    val `chair`: A = cls( "chair" )
    val `chalkboard`: A = cls( "chalkboard" )
    val `chalkboardSimple`: A = cls( "chalkboard-simple" )
    val `chalkboardTeacher`: A = cls( "chalkboard-teacher" )
    val `champagne`: A = cls( "champagne" )
    val `chargingStation`: A = cls( "charging-station" )
    val `chartBar`: A = cls( "chart-bar" )
    val `chartBarHorizontal`: A = cls( "chart-bar-horizontal" )
    val `chartDonut`: A = cls( "chart-donut" )
    val `chartLine`: A = cls( "chart-line" )
    val `chartLineDown`: A = cls( "chart-line-down" )
    val `chartLineUp`: A = cls( "chart-line-up" )
    val `chartPie`: A = cls( "chart-pie" )
    val `chartPieSlice`: A = cls( "chart-pie-slice" )
    val `chartPolar`: A = cls( "chart-polar" )
    val `chartScatter`: A = cls( "chart-scatter" )
    val `chat`: A = cls( "chat" )
    val `chatCentered`: A = cls( "chat-centered" )
    val `chatCenteredDots`: A = cls( "chat-centered-dots" )
    val `chatCenteredSlash`: A = cls( "chat-centered-slash" )
    val `chatCenteredText`: A = cls( "chat-centered-text" )
    val `chatCircle`: A = cls( "chat-circle" )
    val `chatCircleDots`: A = cls( "chat-circle-dots" )
    val `chatCircleSlash`: A = cls( "chat-circle-slash" )
    val `chatCircleText`: A = cls( "chat-circle-text" )
    val `chatDots`: A = cls( "chat-dots" )
    val `chatSlash`: A = cls( "chat-slash" )
    val `chatTeardrop`: A = cls( "chat-teardrop" )
    val `chatTeardropDots`: A = cls( "chat-teardrop-dots" )
    val `chatTeardropSlash`: A = cls( "chat-teardrop-slash" )
    val `chatTeardropText`: A = cls( "chat-teardrop-text" )
    val `chatText`: A = cls( "chat-text" )
    val `chats`: A = cls( "chats" )
    val `chatsCircle`: A = cls( "chats-circle" )
    val `chatsTeardrop`: A = cls( "chats-teardrop" )
    val `check`: A = cls( "check" )
    val `checkCircle`: A = cls( "check-circle" )
    val `checkFat`: A = cls( "check-fat" )
    val `checkSquare`: A = cls( "check-square" )
    val `checkSquareOffset`: A = cls( "check-square-offset" )
    val `checkerboard`: A = cls( "checkerboard" )
    val `checks`: A = cls( "checks" )
    val `cheers`: A = cls( "cheers" )
    val `cheese`: A = cls( "cheese" )
    val `chefHat`: A = cls( "chef-hat" )
    val `cherries`: A = cls( "cherries" )
    val `church`: A = cls( "church" )
    val `cigarette`: A = cls( "cigarette" )
    val `cigaretteSlash`: A = cls( "cigarette-slash" )
    val `circle`: A = cls( "circle" )
    val `circleDashed`: A = cls( "circle-dashed" )
    val `circleHalf`: A = cls( "circle-half" )
    val `circleHalfTilt`: A = cls( "circle-half-tilt" )
    val `circleNotch`: A = cls( "circle-notch" )
    val `circlesFour`: A = cls( "circles-four" )
    val `circlesThree`: A = cls( "circles-three" )
    val `circlesThreePlus`: A = cls( "circles-three-plus" )
    val `circuitry`: A = cls( "circuitry" )
    val `city`: A = cls( "city" )
    val `clipboard`: A = cls( "clipboard" )
    val `clipboardText`: A = cls( "clipboard-text" )
    val `clock`: A = cls( "clock" )
    val `clockAfternoon`: A = cls( "clock-afternoon" )
    val `clockClockwise`: A = cls( "clock-clockwise" )
    val `clockCountdown`: A = cls( "clock-countdown" )
    val `clockCounterClockwise`: A = cls( "clock-counter-clockwise" )
    val `clockUser`: A = cls( "clock-user" )
    val `closedCaptioning`: A = cls( "closed-captioning" )
    val `cloud`: A = cls( "cloud" )
    val `cloudArrowDown`: A = cls( "cloud-arrow-down" )
    val `cloudArrowUp`: A = cls( "cloud-arrow-up" )
    val `cloudCheck`: A = cls( "cloud-check" )
    val `cloudFog`: A = cls( "cloud-fog" )
    val `cloudLightning`: A = cls( "cloud-lightning" )
    val `cloudMoon`: A = cls( "cloud-moon" )
    val `cloudRain`: A = cls( "cloud-rain" )
    val `cloudSlash`: A = cls( "cloud-slash" )
    val `cloudSnow`: A = cls( "cloud-snow" )
    val `cloudSun`: A = cls( "cloud-sun" )
    val `cloudWarning`: A = cls( "cloud-warning" )
    val `cloudX`: A = cls( "cloud-x" )
    val `clover`: A = cls( "clover" )
    val `club`: A = cls( "club" )
    val `coatHanger`: A = cls( "coat-hanger" )
    val `codaLogo`: A = cls( "coda-logo" )
    val `code`: A = cls( "code" )
    val `codeBlock`: A = cls( "code-block" )
    val `codeSimple`: A = cls( "code-simple" )
    val `codepenLogo`: A = cls( "codepen-logo" )
    val `codesandboxLogo`: A = cls( "codesandbox-logo" )
    val `coffee`: A = cls( "coffee" )
    val `coffeeBean`: A = cls( "coffee-bean" )
    val `coin`: A = cls( "coin" )
    val `coinVertical`: A = cls( "coin-vertical" )
    val `coins`: A = cls( "coins" )
    val `columns`: A = cls( "columns" )
    val `columnsPlusLeft`: A = cls( "columns-plus-left" )
    val `columnsPlusRight`: A = cls( "columns-plus-right" )
    val `command`: A = cls( "command" )
    val `compass`: A = cls( "compass" )
    val `compassRose`: A = cls( "compass-rose" )
    val `compassTool`: A = cls( "compass-tool" )
    val `computerTower`: A = cls( "computer-tower" )
    val `confetti`: A = cls( "confetti" )
    val `contactlessPayment`: A = cls( "contactless-payment" )
    val `control`: A = cls( "control" )
    val `cookie`: A = cls( "cookie" )
    val `cookingPot`: A = cls( "cooking-pot" )
    val `copy`: A = cls( "copy" )
    val `copySimple`: A = cls( "copy-simple" )
    val `copyleft`: A = cls( "copyleft" )
    val `copyright`: A = cls( "copyright" )
    val `cornersIn`: A = cls( "corners-in" )
    val `cornersOut`: A = cls( "corners-out" )
    val `couch`: A = cls( "couch" )
    val `courtBasketball`: A = cls( "court-basketball" )
    val `cow`: A = cls( "cow" )
    val `cowboyHat`: A = cls( "cowboy-hat" )
    val `cpu`: A = cls( "cpu" )
    val `crane`: A = cls( "crane" )
    val `craneTower`: A = cls( "crane-tower" )
    val `creditCard`: A = cls( "credit-card" )
    val `cricket`: A = cls( "cricket" )
    val `crop`: A = cls( "crop" )
    val `cross`: A = cls( "cross" )
    val `crosshair`: A = cls( "crosshair" )
    val `crosshairSimple`: A = cls( "crosshair-simple" )
    val `crown`: A = cls( "crown" )
    val `crownCross`: A = cls( "crown-cross" )
    val `crownSimple`: A = cls( "crown-simple" )
    val `cube`: A = cls( "cube" )
    val `cubeFocus`: A = cls( "cube-focus" )
    val `cubeTransparent`: A = cls( "cube-transparent" )
    val `currencyBtc`: A = cls( "currency-btc" )
    val `currencyCircleDollar`: A = cls( "currency-circle-dollar" )
    val `currencyCny`: A = cls( "currency-cny" )
    val `currencyDollar`: A = cls( "currency-dollar" )
    val `currencyDollarSimple`: A = cls( "currency-dollar-simple" )
    val `currencyEth`: A = cls( "currency-eth" )
    val `currencyEur`: A = cls( "currency-eur" )
    val `currencyGbp`: A = cls( "currency-gbp" )
    val `currencyInr`: A = cls( "currency-inr" )
    val `currencyJpy`: A = cls( "currency-jpy" )
    val `currencyKrw`: A = cls( "currency-krw" )
    val `currencyKzt`: A = cls( "currency-kzt" )
    val `currencyNgn`: A = cls( "currency-ngn" )
    val `currencyRub`: A = cls( "currency-rub" )
    val `cursor`: A = cls( "cursor" )
    val `cursorClick`: A = cls( "cursor-click" )
    val `cursorText`: A = cls( "cursor-text" )
    val `cylinder`: A = cls( "cylinder" )
    val `database`: A = cls( "database" )
    val `desk`: A = cls( "desk" )
    val `desktop`: A = cls( "desktop" )
    val `desktopTower`: A = cls( "desktop-tower" )
    val `detective`: A = cls( "detective" )
    val `devToLogo`: A = cls( "dev-to-logo" )
    val `deviceMobile`: A = cls( "device-mobile" )
    val `deviceMobileCamera`: A = cls( "device-mobile-camera" )
    val `deviceMobileSlash`: A = cls( "device-mobile-slash" )
    val `deviceMobileSpeaker`: A = cls( "device-mobile-speaker" )
    val `deviceRotate`: A = cls( "device-rotate" )
    val `deviceTablet`: A = cls( "device-tablet" )
    val `deviceTabletCamera`: A = cls( "device-tablet-camera" )
    val `deviceTabletSpeaker`: A = cls( "device-tablet-speaker" )
    val `devices`: A = cls( "devices" )
    val `diamond`: A = cls( "diamond" )
    val `diamondsFour`: A = cls( "diamonds-four" )
    val `diceFive`: A = cls( "dice-five" )
    val `diceFour`: A = cls( "dice-four" )
    val `diceOne`: A = cls( "dice-one" )
    val `diceSix`: A = cls( "dice-six" )
    val `diceThree`: A = cls( "dice-three" )
    val `diceTwo`: A = cls( "dice-two" )
    val `disc`: A = cls( "disc" )
    val `discoBall`: A = cls( "disco-ball" )
    val `discordLogo`: A = cls( "discord-logo" )
    val `divide`: A = cls( "divide" )
    val `dna`: A = cls( "dna" )
    val `dog`: A = cls( "dog" )
    val `door`: A = cls( "door" )
    val `doorOpen`: A = cls( "door-open" )
    val `dot`: A = cls( "dot" )
    val `dotOutline`: A = cls( "dot-outline" )
    val `dotsNine`: A = cls( "dots-nine" )
    val `dotsSix`: A = cls( "dots-six" )
    val `dotsSixVertical`: A = cls( "dots-six-vertical" )
    val `dotsThree`: A = cls( "dots-three" )
    val `dotsThreeCircle`: A = cls( "dots-three-circle" )
    val `dotsThreeCircleVertical`: A = cls( "dots-three-circle-vertical" )
    val `dotsThreeOutline`: A = cls( "dots-three-outline" )
    val `dotsThreeOutlineVertical`: A = cls( "dots-three-outline-vertical" )
    val `dotsThreeVertical`: A = cls( "dots-three-vertical" )
    val `download`: A = cls( "download" )
    val `downloadSimple`: A = cls( "download-simple" )
    val `dress`: A = cls( "dress" )
    val `dresser`: A = cls( "dresser" )
    val `dribbbleLogo`: A = cls( "dribbble-logo" )
    val `drone`: A = cls( "drone" )
    val `drop`: A = cls( "drop" )
    val `dropHalf`: A = cls( "drop-half" )
    val `dropHalfBottom`: A = cls( "drop-half-bottom" )
    val `dropSimple`: A = cls( "drop-simple" )
    val `dropSlash`: A = cls( "drop-slash" )
    val `dropboxLogo`: A = cls( "dropbox-logo" )
    val `ear`: A = cls( "ear" )
    val `earSlash`: A = cls( "ear-slash" )
    val `egg`: A = cls( "egg" )
    val `eggCrack`: A = cls( "egg-crack" )
    val `eject`: A = cls( "eject" )
    val `ejectSimple`: A = cls( "eject-simple" )
    val `elevator`: A = cls( "elevator" )
    val `empty`: A = cls( "empty" )
    val `engine`: A = cls( "engine" )
    val `envelope`: A = cls( "envelope" )
    val `envelopeOpen`: A = cls( "envelope-open" )
    val `envelopeSimple`: A = cls( "envelope-simple" )
    val `envelopeSimpleOpen`: A = cls( "envelope-simple-open" )
    val `equalizer`: A = cls( "equalizer" )
    val `equals`: A = cls( "equals" )
    val `eraser`: A = cls( "eraser" )
    val `escalatorDown`: A = cls( "escalator-down" )
    val `escalatorUp`: A = cls( "escalator-up" )
    val `exam`: A = cls( "exam" )
    val `exclamationMark`: A = cls( "exclamation-mark" )
    val `exclude`: A = cls( "exclude" )
    val `excludeSquare`: A = cls( "exclude-square" )
    val `export`: A = cls( "export" )
    val `eye`: A = cls( "eye" )
    val `eyeClosed`: A = cls( "eye-closed" )
    val `eyeSlash`: A = cls( "eye-slash" )
    val `eyedropper`: A = cls( "eyedropper" )
    val `eyedropperSample`: A = cls( "eyedropper-sample" )
    val `eyeglasses`: A = cls( "eyeglasses" )
    val `eyes`: A = cls( "eyes" )
    val `faceMask`: A = cls( "face-mask" )
    val `facebookLogo`: A = cls( "facebook-logo" )
    val `factory`: A = cls( "factory" )
    val `faders`: A = cls( "faders" )
    val `fadersHorizontal`: A = cls( "faders-horizontal" )
    val `falloutShelter`: A = cls( "fallout-shelter" )
    val `fan`: A = cls( "fan" )
    val `farm`: A = cls( "farm" )
    val `fastForward`: A = cls( "fast-forward" )
    val `fastForwardCircle`: A = cls( "fast-forward-circle" )
    val `feather`: A = cls( "feather" )
    val `fediverseLogo`: A = cls( "fediverse-logo" )
    val `figmaLogo`: A = cls( "figma-logo" )
    val `file`: A = cls( "file" )
    val `fileArchive`: A = cls( "file-archive" )
    val `fileArrowDown`: A = cls( "file-arrow-down" )
    val `fileArrowUp`: A = cls( "file-arrow-up" )
    val `fileAudio`: A = cls( "file-audio" )
    val `fileC`: A = cls( "file-c" )
    val `fileCSharp`: A = cls( "file-c-sharp" )
    val `fileCloud`: A = cls( "file-cloud" )
    val `fileCode`: A = cls( "file-code" )
    val `fileCpp`: A = cls( "file-cpp" )
    val `fileCss`: A = cls( "file-css" )
    val `fileCsv`: A = cls( "file-csv" )
    val `fileDashed`: A = cls( "file-dashed" )
    val `fileDoc`: A = cls( "file-doc" )
    val `fileHtml`: A = cls( "file-html" )
    val `fileImage`: A = cls( "file-image" )
    val `fileIni`: A = cls( "file-ini" )
    val `fileJpg`: A = cls( "file-jpg" )
    val `fileJs`: A = cls( "file-js" )
    val `fileJsx`: A = cls( "file-jsx" )
    val `fileLock`: A = cls( "file-lock" )
    val `fileMagnifyingGlass`: A = cls( "file-magnifying-glass" )
    val `fileMd`: A = cls( "file-md" )
    val `fileMinus`: A = cls( "file-minus" )
    val `filePdf`: A = cls( "file-pdf" )
    val `filePlus`: A = cls( "file-plus" )
    val `filePng`: A = cls( "file-png" )
    val `filePpt`: A = cls( "file-ppt" )
    val `filePy`: A = cls( "file-py" )
    val `fileRs`: A = cls( "file-rs" )
    val `fileSql`: A = cls( "file-sql" )
    val `fileSvg`: A = cls( "file-svg" )
    val `fileText`: A = cls( "file-text" )
    val `fileTs`: A = cls( "file-ts" )
    val `fileTsx`: A = cls( "file-tsx" )
    val `fileTxt`: A = cls( "file-txt" )
    val `fileVideo`: A = cls( "file-video" )
    val `fileVue`: A = cls( "file-vue" )
    val `fileX`: A = cls( "file-x" )
    val `fileXls`: A = cls( "file-xls" )
    val `fileZip`: A = cls( "file-zip" )
    val `files`: A = cls( "files" )
    val `filmReel`: A = cls( "film-reel" )
    val `filmScript`: A = cls( "film-script" )
    val `filmSlate`: A = cls( "film-slate" )
    val `filmStrip`: A = cls( "film-strip" )
    val `fingerprint`: A = cls( "fingerprint" )
    val `fingerprintSimple`: A = cls( "fingerprint-simple" )
    val `finnTheHuman`: A = cls( "finn-the-human" )
    val `fire`: A = cls( "fire" )
    val `fireExtinguisher`: A = cls( "fire-extinguisher" )
    val `fireSimple`: A = cls( "fire-simple" )
    val `fireTruck`: A = cls( "fire-truck" )
    val `firstAid`: A = cls( "first-aid" )
    val `firstAidKit`: A = cls( "first-aid-kit" )
    val `fish`: A = cls( "fish" )
    val `fishSimple`: A = cls( "fish-simple" )
    val `flag`: A = cls( "flag" )
    val `flagBanner`: A = cls( "flag-banner" )
    val `flagBannerFold`: A = cls( "flag-banner-fold" )
    val `flagCheckered`: A = cls( "flag-checkered" )
    val `flagPennant`: A = cls( "flag-pennant" )
    val `flame`: A = cls( "flame" )
    val `flashlight`: A = cls( "flashlight" )
    val `flask`: A = cls( "flask" )
    val `flipHorizontal`: A = cls( "flip-horizontal" )
    val `flipVertical`: A = cls( "flip-vertical" )
    val `floppyDisk`: A = cls( "floppy-disk" )
    val `floppyDiskBack`: A = cls( "floppy-disk-back" )
    val `flowArrow`: A = cls( "flow-arrow" )
    val `flower`: A = cls( "flower" )
    val `flowerLotus`: A = cls( "flower-lotus" )
    val `flowerTulip`: A = cls( "flower-tulip" )
    val `flyingSaucer`: A = cls( "flying-saucer" )
    val `folder`: A = cls( "folder" )
    val `folderDashed`: A = cls( "folder-dashed" )
    val `folderLock`: A = cls( "folder-lock" )
    val `folderMinus`: A = cls( "folder-minus" )
    val `folderOpen`: A = cls( "folder-open" )
    val `folderPlus`: A = cls( "folder-plus" )
    val `folderSimple`: A = cls( "folder-simple" )
    val `folderSimpleDashed`: A = cls( "folder-simple-dashed" )
    val `folderSimpleLock`: A = cls( "folder-simple-lock" )
    val `folderSimpleMinus`: A = cls( "folder-simple-minus" )
    val `folderSimplePlus`: A = cls( "folder-simple-plus" )
    val `folderSimpleStar`: A = cls( "folder-simple-star" )
    val `folderSimpleUser`: A = cls( "folder-simple-user" )
    val `folderStar`: A = cls( "folder-star" )
    val `folderUser`: A = cls( "folder-user" )
    val `folders`: A = cls( "folders" )
    val `football`: A = cls( "football" )
    val `footballHelmet`: A = cls( "football-helmet" )
    val `footprints`: A = cls( "footprints" )
    val `forkKnife`: A = cls( "fork-knife" )
    val `fourK`: A = cls( "four-k" )
    val `frameCorners`: A = cls( "frame-corners" )
    val `framerLogo`: A = cls( "framer-logo" )
    val `function`: A = cls( "function" )
    val `funnel`: A = cls( "funnel" )
    val `funnelSimple`: A = cls( "funnel-simple" )
    val `funnelSimpleX`: A = cls( "funnel-simple-x" )
    val `funnelX`: A = cls( "funnel-x" )
    val `gameController`: A = cls( "game-controller" )
    val `garage`: A = cls( "garage" )
    val `gasCan`: A = cls( "gas-can" )
    val `gasPump`: A = cls( "gas-pump" )
    val `gauge`: A = cls( "gauge" )
    val `gavel`: A = cls( "gavel" )
    val `gear`: A = cls( "gear" )
    val `gearFine`: A = cls( "gear-fine" )
    val `gearSix`: A = cls( "gear-six" )
    val `genderFemale`: A = cls( "gender-female" )
    val `genderIntersex`: A = cls( "gender-intersex" )
    val `genderMale`: A = cls( "gender-male" )
    val `genderNeuter`: A = cls( "gender-neuter" )
    val `genderNonbinary`: A = cls( "gender-nonbinary" )
    val `genderTransgender`: A = cls( "gender-transgender" )
    val `ghost`: A = cls( "ghost" )
    val `gif`: A = cls( "gif" )
    val `gift`: A = cls( "gift" )
    val `gitBranch`: A = cls( "git-branch" )
    val `gitCommit`: A = cls( "git-commit" )
    val `gitDiff`: A = cls( "git-diff" )
    val `gitFork`: A = cls( "git-fork" )
    val `gitMerge`: A = cls( "git-merge" )
    val `gitPullRequest`: A = cls( "git-pull-request" )
    val `githubLogo`: A = cls( "github-logo" )
    val `gitlabLogo`: A = cls( "gitlab-logo" )
    val `gitlabLogoSimple`: A = cls( "gitlab-logo-simple" )
    val `globe`: A = cls( "globe" )
    val `globeHemisphereEast`: A = cls( "globe-hemisphere-east" )
    val `globeHemisphereWest`: A = cls( "globe-hemisphere-west" )
    val `globeSimple`: A = cls( "globe-simple" )
    val `globeSimpleX`: A = cls( "globe-simple-x" )
    val `globeStand`: A = cls( "globe-stand" )
    val `globeX`: A = cls( "globe-x" )
    val `goggles`: A = cls( "goggles" )
    val `golf`: A = cls( "golf" )
    val `goodreadsLogo`: A = cls( "goodreads-logo" )
    val `googleCardboardLogo`: A = cls( "google-cardboard-logo" )
    val `googleChromeLogo`: A = cls( "google-chrome-logo" )
    val `googleDriveLogo`: A = cls( "google-drive-logo" )
    val `googleLogo`: A = cls( "google-logo" )
    val `googlePhotosLogo`: A = cls( "google-photos-logo" )
    val `googlePlayLogo`: A = cls( "google-play-logo" )
    val `googlePodcastsLogo`: A = cls( "google-podcasts-logo" )
    val `gps`: A = cls( "gps" )
    val `gpsFix`: A = cls( "gps-fix" )
    val `gpsSlash`: A = cls( "gps-slash" )
    val `gradient`: A = cls( "gradient" )
    val `graduationCap`: A = cls( "graduation-cap" )
    val `grains`: A = cls( "grains" )
    val `grainsSlash`: A = cls( "grains-slash" )
    val `graph`: A = cls( "graph" )
    val `graphicsCard`: A = cls( "graphics-card" )
    val `greaterThan`: A = cls( "greater-than" )
    val `greaterThanOrEqual`: A = cls( "greater-than-or-equal" )
    val `gridFour`: A = cls( "grid-four" )
    val `gridNine`: A = cls( "grid-nine" )
    val `guitar`: A = cls( "guitar" )
    val `hairDryer`: A = cls( "hair-dryer" )
    val `hamburger`: A = cls( "hamburger" )
    val `hammer`: A = cls( "hammer" )
    val `hand`: A = cls( "hand" )
    val `handArrowDown`: A = cls( "hand-arrow-down" )
    val `handArrowUp`: A = cls( "hand-arrow-up" )
    val `handCoins`: A = cls( "hand-coins" )
    val `handDeposit`: A = cls( "hand-deposit" )
    val `handEye`: A = cls( "hand-eye" )
    val `handFist`: A = cls( "hand-fist" )
    val `handGrabbing`: A = cls( "hand-grabbing" )
    val `handHeart`: A = cls( "hand-heart" )
    val `handPalm`: A = cls( "hand-palm" )
    val `handPeace`: A = cls( "hand-peace" )
    val `handPointing`: A = cls( "hand-pointing" )
    val `handSoap`: A = cls( "hand-soap" )
    val `handSwipeLeft`: A = cls( "hand-swipe-left" )
    val `handSwipeRight`: A = cls( "hand-swipe-right" )
    val `handTap`: A = cls( "hand-tap" )
    val `handWaving`: A = cls( "hand-waving" )
    val `handWithdraw`: A = cls( "hand-withdraw" )
    val `handbag`: A = cls( "handbag" )
    val `handbagSimple`: A = cls( "handbag-simple" )
    val `handsClapping`: A = cls( "hands-clapping" )
    val `handsPraying`: A = cls( "hands-praying" )
    val `handshake`: A = cls( "handshake" )
    val `hardDrive`: A = cls( "hard-drive" )
    val `hardDrives`: A = cls( "hard-drives" )
    val `hardHat`: A = cls( "hard-hat" )
    val `hash`: A = cls( "hash" )
    val `hashStraight`: A = cls( "hash-straight" )
    val `headCircuit`: A = cls( "head-circuit" )
    val `headlights`: A = cls( "headlights" )
    val `headphones`: A = cls( "headphones" )
    val `headset`: A = cls( "headset" )
    val `heart`: A = cls( "heart" )
    val `heartBreak`: A = cls( "heart-break" )
    val `heartHalf`: A = cls( "heart-half" )
    val `heartStraight`: A = cls( "heart-straight" )
    val `heartStraightBreak`: A = cls( "heart-straight-break" )
    val `heartbeat`: A = cls( "heartbeat" )
    val `hexagon`: A = cls( "hexagon" )
    val `highDefinition`: A = cls( "high-definition" )
    val `highHeel`: A = cls( "high-heel" )
    val `highlighter`: A = cls( "highlighter" )
    val `highlighterCircle`: A = cls( "highlighter-circle" )
    val `hockey`: A = cls( "hockey" )
    val `hoodie`: A = cls( "hoodie" )
    val `horse`: A = cls( "horse" )
    val `hospital`: A = cls( "hospital" )
    val `hourglass`: A = cls( "hourglass" )
    val `hourglassHigh`: A = cls( "hourglass-high" )
    val `hourglassLow`: A = cls( "hourglass-low" )
    val `hourglassMedium`: A = cls( "hourglass-medium" )
    val `hourglassSimple`: A = cls( "hourglass-simple" )
    val `hourglassSimpleHigh`: A = cls( "hourglass-simple-high" )
    val `hourglassSimpleLow`: A = cls( "hourglass-simple-low" )
    val `hourglassSimpleMedium`: A = cls( "hourglass-simple-medium" )
    val `house`: A = cls( "house" )
    val `houseLine`: A = cls( "house-line" )
    val `houseSimple`: A = cls( "house-simple" )
    val `hurricane`: A = cls( "hurricane" )
    val `iceCream`: A = cls( "ice-cream" )
    val `identificationBadge`: A = cls( "identification-badge" )
    val `identificationCard`: A = cls( "identification-card" )
    val `image`: A = cls( "image" )
    val `imageBroken`: A = cls( "image-broken" )
    val `imageSquare`: A = cls( "image-square" )
    val `images`: A = cls( "images" )
    val `imagesSquare`: A = cls( "images-square" )
    val `infinity`: A = cls( "infinity" )
    val `info`: A = cls( "info" )
    val `instagramLogo`: A = cls( "instagram-logo" )
    val `intersect`: A = cls( "intersect" )
    val `intersectSquare`: A = cls( "intersect-square" )
    val `intersectThree`: A = cls( "intersect-three" )
    val `intersection`: A = cls( "intersection" )
    val `invoice`: A = cls( "invoice" )
    val `island`: A = cls( "island" )
    val `jar`: A = cls( "jar" )
    val `jarLabel`: A = cls( "jar-label" )
    val `jeep`: A = cls( "jeep" )
    val `joystick`: A = cls( "joystick" )
    val `kanban`: A = cls( "kanban" )
    val `key`: A = cls( "key" )
    val `keyReturn`: A = cls( "key-return" )
    val `keyboard`: A = cls( "keyboard" )
    val `keyhole`: A = cls( "keyhole" )
    val `knife`: A = cls( "knife" )
    val `ladder`: A = cls( "ladder" )
    val `ladderSimple`: A = cls( "ladder-simple" )
    val `lamp`: A = cls( "lamp" )
    val `lampPendant`: A = cls( "lamp-pendant" )
    val `laptop`: A = cls( "laptop" )
    val `lasso`: A = cls( "lasso" )
    val `lastfmLogo`: A = cls( "lastfm-logo" )
    val `layout`: A = cls( "layout" )
    val `leaf`: A = cls( "leaf" )
    val `lectern`: A = cls( "lectern" )
    val `lego`: A = cls( "lego" )
    val `legoSmiley`: A = cls( "lego-smiley" )
    val `lessThan`: A = cls( "less-than" )
    val `lessThanOrEqual`: A = cls( "less-than-or-equal" )
    val `letterCircleH`: A = cls( "letter-circle-h" )
    val `letterCircleP`: A = cls( "letter-circle-p" )
    val `letterCircleV`: A = cls( "letter-circle-v" )
    val `lifebuoy`: A = cls( "lifebuoy" )
    val `lightbulb`: A = cls( "lightbulb" )
    val `lightbulbFilament`: A = cls( "lightbulb-filament" )
    val `lighthouse`: A = cls( "lighthouse" )
    val `lightning`: A = cls( "lightning" )
    val `lightningA`: A = cls( "lightning-a" )
    val `lightningSlash`: A = cls( "lightning-slash" )
    val `lineSegment`: A = cls( "line-segment" )
    val `lineSegments`: A = cls( "line-segments" )
    val `lineVertical`: A = cls( "line-vertical" )
    val `link`: A = cls( "link" )
    val `linkBreak`: A = cls( "link-break" )
    val `linkSimple`: A = cls( "link-simple" )
    val `linkSimpleBreak`: A = cls( "link-simple-break" )
    val `linkSimpleHorizontal`: A = cls( "link-simple-horizontal" )
    val `linkSimpleHorizontalBreak`: A = cls( "link-simple-horizontal-break" )
    val `linkedinLogo`: A = cls( "linkedin-logo" )
    val `linktreeLogo`: A = cls( "linktree-logo" )
    val `linuxLogo`: A = cls( "linux-logo" )
    val `list`: A = cls( "list" )
    val `listBullets`: A = cls( "list-bullets" )
    val `listChecks`: A = cls( "list-checks" )
    val `listDashes`: A = cls( "list-dashes" )
    val `listHeart`: A = cls( "list-heart" )
    val `listMagnifyingGlass`: A = cls( "list-magnifying-glass" )
    val `listNumbers`: A = cls( "list-numbers" )
    val `listPlus`: A = cls( "list-plus" )
    val `listStar`: A = cls( "list-star" )
    val `lock`: A = cls( "lock" )
    val `lockKey`: A = cls( "lock-key" )
    val `lockKeyOpen`: A = cls( "lock-key-open" )
    val `lockLaminated`: A = cls( "lock-laminated" )
    val `lockLaminatedOpen`: A = cls( "lock-laminated-open" )
    val `lockOpen`: A = cls( "lock-open" )
    val `lockSimple`: A = cls( "lock-simple" )
    val `lockSimpleOpen`: A = cls( "lock-simple-open" )
    val `lockers`: A = cls( "lockers" )
    val `log`: A = cls( "log" )
    val `magicWand`: A = cls( "magic-wand" )
    val `magnet`: A = cls( "magnet" )
    val `magnetStraight`: A = cls( "magnet-straight" )
    val `magnifyingGlass`: A = cls( "magnifying-glass" )
    val `magnifyingGlassMinus`: A = cls( "magnifying-glass-minus" )
    val `magnifyingGlassPlus`: A = cls( "magnifying-glass-plus" )
    val `mailbox`: A = cls( "mailbox" )
    val `mapPin`: A = cls( "map-pin" )
    val `mapPinArea`: A = cls( "map-pin-area" )
    val `mapPinLine`: A = cls( "map-pin-line" )
    val `mapPinPlus`: A = cls( "map-pin-plus" )
    val `mapPinSimple`: A = cls( "map-pin-simple" )
    val `mapPinSimpleArea`: A = cls( "map-pin-simple-area" )
    val `mapPinSimpleLine`: A = cls( "map-pin-simple-line" )
    val `mapTrifold`: A = cls( "map-trifold" )
    val `markdownLogo`: A = cls( "markdown-logo" )
    val `markerCircle`: A = cls( "marker-circle" )
    val `martini`: A = cls( "martini" )
    val `maskHappy`: A = cls( "mask-happy" )
    val `maskSad`: A = cls( "mask-sad" )
    val `mastodonLogo`: A = cls( "mastodon-logo" )
    val `mathOperations`: A = cls( "math-operations" )
    val `matrixLogo`: A = cls( "matrix-logo" )
    val `medal`: A = cls( "medal" )
    val `medalMilitary`: A = cls( "medal-military" )
    val `mediumLogo`: A = cls( "medium-logo" )
    val `megaphone`: A = cls( "megaphone" )
    val `megaphoneSimple`: A = cls( "megaphone-simple" )
    val `memberOf`: A = cls( "member-of" )
    val `memory`: A = cls( "memory" )
    val `messengerLogo`: A = cls( "messenger-logo" )
    val `metaLogo`: A = cls( "meta-logo" )
    val `meteor`: A = cls( "meteor" )
    val `metronome`: A = cls( "metronome" )
    val `microphone`: A = cls( "microphone" )
    val `microphoneSlash`: A = cls( "microphone-slash" )
    val `microphoneStage`: A = cls( "microphone-stage" )
    val `microscope`: A = cls( "microscope" )
    val `microsoftExcelLogo`: A = cls( "microsoft-excel-logo" )
    val `microsoftOutlookLogo`: A = cls( "microsoft-outlook-logo" )
    val `microsoftPowerpointLogo`: A = cls( "microsoft-powerpoint-logo" )
    val `microsoftTeamsLogo`: A = cls( "microsoft-teams-logo" )
    val `microsoftWordLogo`: A = cls( "microsoft-word-logo" )
    val `minus`: A = cls( "minus" )
    val `minusCircle`: A = cls( "minus-circle" )
    val `minusSquare`: A = cls( "minus-square" )
    val `money`: A = cls( "money" )
    val `moneyWavy`: A = cls( "money-wavy" )
    val `monitor`: A = cls( "monitor" )
    val `monitorArrowUp`: A = cls( "monitor-arrow-up" )
    val `monitorPlay`: A = cls( "monitor-play" )
    val `moon`: A = cls( "moon" )
    val `moonStars`: A = cls( "moon-stars" )
    val `moped`: A = cls( "moped" )
    val `mopedFront`: A = cls( "moped-front" )
    val `mosque`: A = cls( "mosque" )
    val `motorcycle`: A = cls( "motorcycle" )
    val `mountains`: A = cls( "mountains" )
    val `mouse`: A = cls( "mouse" )
    val `mouseLeftClick`: A = cls( "mouse-left-click" )
    val `mouseMiddleClick`: A = cls( "mouse-middle-click" )
    val `mouseRightClick`: A = cls( "mouse-right-click" )
    val `mouseScroll`: A = cls( "mouse-scroll" )
    val `mouseSimple`: A = cls( "mouse-simple" )
    val `musicNote`: A = cls( "music-note" )
    val `musicNoteSimple`: A = cls( "music-note-simple" )
    val `musicNotes`: A = cls( "music-notes" )
    val `musicNotesMinus`: A = cls( "music-notes-minus" )
    val `musicNotesPlus`: A = cls( "music-notes-plus" )
    val `musicNotesSimple`: A = cls( "music-notes-simple" )
    val `navigationArrow`: A = cls( "navigation-arrow" )
    val `needle`: A = cls( "needle" )
    val `network`: A = cls( "network" )
    val `networkSlash`: A = cls( "network-slash" )
    val `networkX`: A = cls( "network-x" )
    val `newspaper`: A = cls( "newspaper" )
    val `newspaperClipping`: A = cls( "newspaper-clipping" )
    val `notEquals`: A = cls( "not-equals" )
    val `notMemberOf`: A = cls( "not-member-of" )
    val `notSubsetOf`: A = cls( "not-subset-of" )
    val `notSupersetOf`: A = cls( "not-superset-of" )
    val `notches`: A = cls( "notches" )
    val `note`: A = cls( "note" )
    val `noteBlank`: A = cls( "note-blank" )
    val `notePencil`: A = cls( "note-pencil" )
    val `notebook`: A = cls( "notebook" )
    val `notepad`: A = cls( "notepad" )
    val `notification`: A = cls( "notification" )
    val `notionLogo`: A = cls( "notion-logo" )
    val `nuclearPlant`: A = cls( "nuclear-plant" )
    val `numberCircleEight`: A = cls( "number-circle-eight" )
    val `numberCircleFive`: A = cls( "number-circle-five" )
    val `numberCircleFour`: A = cls( "number-circle-four" )
    val `numberCircleNine`: A = cls( "number-circle-nine" )
    val `numberCircleOne`: A = cls( "number-circle-one" )
    val `numberCircleSeven`: A = cls( "number-circle-seven" )
    val `numberCircleSix`: A = cls( "number-circle-six" )
    val `numberCircleThree`: A = cls( "number-circle-three" )
    val `numberCircleTwo`: A = cls( "number-circle-two" )
    val `numberCircleZero`: A = cls( "number-circle-zero" )
    val `numberEight`: A = cls( "number-eight" )
    val `numberFive`: A = cls( "number-five" )
    val `numberFour`: A = cls( "number-four" )
    val `numberNine`: A = cls( "number-nine" )
    val `numberOne`: A = cls( "number-one" )
    val `numberSeven`: A = cls( "number-seven" )
    val `numberSix`: A = cls( "number-six" )
    val `numberSquareEight`: A = cls( "number-square-eight" )
    val `numberSquareFive`: A = cls( "number-square-five" )
    val `numberSquareFour`: A = cls( "number-square-four" )
    val `numberSquareNine`: A = cls( "number-square-nine" )
    val `numberSquareOne`: A = cls( "number-square-one" )
    val `numberSquareSeven`: A = cls( "number-square-seven" )
    val `numberSquareSix`: A = cls( "number-square-six" )
    val `numberSquareThree`: A = cls( "number-square-three" )
    val `numberSquareTwo`: A = cls( "number-square-two" )
    val `numberSquareZero`: A = cls( "number-square-zero" )
    val `numberThree`: A = cls( "number-three" )
    val `numberTwo`: A = cls( "number-two" )
    val `numberZero`: A = cls( "number-zero" )
    val `numpad`: A = cls( "numpad" )
    val `nut`: A = cls( "nut" )
    val `nyTimesLogo`: A = cls( "ny-times-logo" )
    val `octagon`: A = cls( "octagon" )
    val `officeChair`: A = cls( "office-chair" )
    val `onigiri`: A = cls( "onigiri" )
    val `openAiLogo`: A = cls( "open-ai-logo" )
    val `option`: A = cls( "option" )
    val `orange`: A = cls( "orange" )
    val `orangeSlice`: A = cls( "orange-slice" )
    val `oven`: A = cls( "oven" )
    val `package`: A = cls( "package" )
    val `paintBrush`: A = cls( "paint-brush" )
    val `paintBrushBroad`: A = cls( "paint-brush-broad" )
    val `paintBrushHousehold`: A = cls( "paint-brush-household" )
    val `paintBucket`: A = cls( "paint-bucket" )
    val `paintRoller`: A = cls( "paint-roller" )
    val `palette`: A = cls( "palette" )
    val `panorama`: A = cls( "panorama" )
    val `pants`: A = cls( "pants" )
    val `paperPlane`: A = cls( "paper-plane" )
    val `paperPlaneRight`: A = cls( "paper-plane-right" )
    val `paperPlaneTilt`: A = cls( "paper-plane-tilt" )
    val `paperclip`: A = cls( "paperclip" )
    val `paperclipHorizontal`: A = cls( "paperclip-horizontal" )
    val `parachute`: A = cls( "parachute" )
    val `paragraph`: A = cls( "paragraph" )
    val `parallelogram`: A = cls( "parallelogram" )
    val `park`: A = cls( "park" )
    val `password`: A = cls( "password" )
    val `path`: A = cls( "path" )
    val `patreonLogo`: A = cls( "patreon-logo" )
    val `pause`: A = cls( "pause" )
    val `pauseCircle`: A = cls( "pause-circle" )
    val `pawPrint`: A = cls( "paw-print" )
    val `paypalLogo`: A = cls( "paypal-logo" )
    val `peace`: A = cls( "peace" )
    val `pen`: A = cls( "pen" )
    val `penNib`: A = cls( "pen-nib" )
    val `penNibStraight`: A = cls( "pen-nib-straight" )
    val `pencil`: A = cls( "pencil" )
    val `pencilCircle`: A = cls( "pencil-circle" )
    val `pencilLine`: A = cls( "pencil-line" )
    val `pencilRuler`: A = cls( "pencil-ruler" )
    val `pencilSimple`: A = cls( "pencil-simple" )
    val `pencilSimpleLine`: A = cls( "pencil-simple-line" )
    val `pencilSimpleSlash`: A = cls( "pencil-simple-slash" )
    val `pencilSlash`: A = cls( "pencil-slash" )
    val `pentagon`: A = cls( "pentagon" )
    val `pentagram`: A = cls( "pentagram" )
    val `pepper`: A = cls( "pepper" )
    val `percent`: A = cls( "percent" )
    val `person`: A = cls( "person" )
    val `personArmsSpread`: A = cls( "person-arms-spread" )
    val `personSimple`: A = cls( "person-simple" )
    val `personSimpleBike`: A = cls( "person-simple-bike" )
    val `personSimpleCircle`: A = cls( "person-simple-circle" )
    val `personSimpleHike`: A = cls( "person-simple-hike" )
    val `personSimpleRun`: A = cls( "person-simple-run" )
    val `personSimpleSki`: A = cls( "person-simple-ski" )
    val `personSimpleSnowboard`: A = cls( "person-simple-snowboard" )
    val `personSimpleSwim`: A = cls( "person-simple-swim" )
    val `personSimpleTaiChi`: A = cls( "person-simple-tai-chi" )
    val `personSimpleThrow`: A = cls( "person-simple-throw" )
    val `personSimpleWalk`: A = cls( "person-simple-walk" )
    val `perspective`: A = cls( "perspective" )
    val `phone`: A = cls( "phone" )
    val `phoneCall`: A = cls( "phone-call" )
    val `phoneDisconnect`: A = cls( "phone-disconnect" )
    val `phoneIncoming`: A = cls( "phone-incoming" )
    val `phoneList`: A = cls( "phone-list" )
    val `phoneOutgoing`: A = cls( "phone-outgoing" )
    val `phonePause`: A = cls( "phone-pause" )
    val `phonePlus`: A = cls( "phone-plus" )
    val `phoneSlash`: A = cls( "phone-slash" )
    val `phoneTransfer`: A = cls( "phone-transfer" )
    val `phoneX`: A = cls( "phone-x" )
    val `phosphorLogo`: A = cls( "phosphor-logo" )
    val `pi`: A = cls( "pi" )
    val `pianoKeys`: A = cls( "piano-keys" )
    val `picnicTable`: A = cls( "picnic-table" )
    val `pictureInPicture`: A = cls( "picture-in-picture" )
    val `piggyBank`: A = cls( "piggy-bank" )
    val `pill`: A = cls( "pill" )
    val `pingPong`: A = cls( "ping-pong" )
    val `pintGlass`: A = cls( "pint-glass" )
    val `pinterestLogo`: A = cls( "pinterest-logo" )
    val `pinwheel`: A = cls( "pinwheel" )
    val `pipe`: A = cls( "pipe" )
    val `pipeWrench`: A = cls( "pipe-wrench" )
    val `pixLogo`: A = cls( "pix-logo" )
    val `pizza`: A = cls( "pizza" )
    val `placeholder`: A = cls( "placeholder" )
    val `planet`: A = cls( "planet" )
    val `plant`: A = cls( "plant" )
    val `play`: A = cls( "play" )
    val `playCircle`: A = cls( "play-circle" )
    val `playPause`: A = cls( "play-pause" )
    val `playlist`: A = cls( "playlist" )
    val `plug`: A = cls( "plug" )
    val `plugCharging`: A = cls( "plug-charging" )
    val `plugs`: A = cls( "plugs" )
    val `plugsConnected`: A = cls( "plugs-connected" )
    val `plus`: A = cls( "plus" )
    val `plusCircle`: A = cls( "plus-circle" )
    val `plusMinus`: A = cls( "plus-minus" )
    val `plusSquare`: A = cls( "plus-square" )
    val `pokerChip`: A = cls( "poker-chip" )
    val `policeCar`: A = cls( "police-car" )
    val `polygon`: A = cls( "polygon" )
    val `popcorn`: A = cls( "popcorn" )
    val `popsicle`: A = cls( "popsicle" )
    val `pottedPlant`: A = cls( "potted-plant" )
    val `power`: A = cls( "power" )
    val `prescription`: A = cls( "prescription" )
    val `presentation`: A = cls( "presentation" )
    val `presentationChart`: A = cls( "presentation-chart" )
    val `printer`: A = cls( "printer" )
    val `prohibit`: A = cls( "prohibit" )
    val `prohibitInset`: A = cls( "prohibit-inset" )
    val `projectorScreen`: A = cls( "projector-screen" )
    val `projectorScreenChart`: A = cls( "projector-screen-chart" )
    val `pulse`: A = cls( "pulse" )
    val `pushPin`: A = cls( "push-pin" )
    val `pushPinSimple`: A = cls( "push-pin-simple" )
    val `pushPinSimpleSlash`: A = cls( "push-pin-simple-slash" )
    val `pushPinSlash`: A = cls( "push-pin-slash" )
    val `puzzlePiece`: A = cls( "puzzle-piece" )
    val `qrCode`: A = cls( "qr-code" )
    val `question`: A = cls( "question" )
    val `questionMark`: A = cls( "question-mark" )
    val `queue`: A = cls( "queue" )
    val `quotes`: A = cls( "quotes" )
    val `rabbit`: A = cls( "rabbit" )
    val `racquet`: A = cls( "racquet" )
    val `radical`: A = cls( "radical" )
    val `radio`: A = cls( "radio" )
    val `radioButton`: A = cls( "radio-button" )
    val `radioactive`: A = cls( "radioactive" )
    val `rainbow`: A = cls( "rainbow" )
    val `rainbowCloud`: A = cls( "rainbow-cloud" )
    val `ranking`: A = cls( "ranking" )
    val `readCvLogo`: A = cls( "read-cv-logo" )
    val `receipt`: A = cls( "receipt" )
    val `receiptX`: A = cls( "receipt-x" )
    val `record`: A = cls( "record" )
    val `rectangle`: A = cls( "rectangle" )
    val `rectangleDashed`: A = cls( "rectangle-dashed" )
    val `recycle`: A = cls( "recycle" )
    val `redditLogo`: A = cls( "reddit-logo" )
    val `repeat`: A = cls( "repeat" )
    val `repeatOnce`: A = cls( "repeat-once" )
    val `replitLogo`: A = cls( "replit-logo" )
    val `resize`: A = cls( "resize" )
    val `rewind`: A = cls( "rewind" )
    val `rewindCircle`: A = cls( "rewind-circle" )
    val `roadHorizon`: A = cls( "road-horizon" )
    val `robot`: A = cls( "robot" )
    val `rocket`: A = cls( "rocket" )
    val `rocketLaunch`: A = cls( "rocket-launch" )
    val `rows`: A = cls( "rows" )
    val `rowsPlusBottom`: A = cls( "rows-plus-bottom" )
    val `rowsPlusTop`: A = cls( "rows-plus-top" )
    val `rss`: A = cls( "rss" )
    val `rssSimple`: A = cls( "rss-simple" )
    val `rug`: A = cls( "rug" )
    val `ruler`: A = cls( "ruler" )
    val `sailboat`: A = cls( "sailboat" )
    val `scales`: A = cls( "scales" )
    val `scan`: A = cls( "scan" )
    val `scanSmiley`: A = cls( "scan-smiley" )
    val `scissors`: A = cls( "scissors" )
    val `scooter`: A = cls( "scooter" )
    val `screencast`: A = cls( "screencast" )
    val `screwdriver`: A = cls( "screwdriver" )
    val `scribble`: A = cls( "scribble" )
    val `scribbleLoop`: A = cls( "scribble-loop" )
    val `scroll`: A = cls( "scroll" )
    val `seal`: A = cls( "seal" )
    val `sealCheck`: A = cls( "seal-check" )
    val `sealPercent`: A = cls( "seal-percent" )
    val `sealQuestion`: A = cls( "seal-question" )
    val `sealWarning`: A = cls( "seal-warning" )
    val `seat`: A = cls( "seat" )
    val `seatbelt`: A = cls( "seatbelt" )
    val `securityCamera`: A = cls( "security-camera" )
    val `selection`: A = cls( "selection" )
    val `selectionAll`: A = cls( "selection-all" )
    val `selectionBackground`: A = cls( "selection-background" )
    val `selectionForeground`: A = cls( "selection-foreground" )
    val `selectionInverse`: A = cls( "selection-inverse" )
    val `selectionPlus`: A = cls( "selection-plus" )
    val `selectionSlash`: A = cls( "selection-slash" )
    val `shapes`: A = cls( "shapes" )
    val `share`: A = cls( "share" )
    val `shareFat`: A = cls( "share-fat" )
    val `shareNetwork`: A = cls( "share-network" )
    val `shield`: A = cls( "shield" )
    val `shieldCheck`: A = cls( "shield-check" )
    val `shieldCheckered`: A = cls( "shield-checkered" )
    val `shieldChevron`: A = cls( "shield-chevron" )
    val `shieldPlus`: A = cls( "shield-plus" )
    val `shieldSlash`: A = cls( "shield-slash" )
    val `shieldStar`: A = cls( "shield-star" )
    val `shieldWarning`: A = cls( "shield-warning" )
    val `shippingContainer`: A = cls( "shipping-container" )
    val `shirtFolded`: A = cls( "shirt-folded" )
    val `shootingStar`: A = cls( "shooting-star" )
    val `shoppingBag`: A = cls( "shopping-bag" )
    val `shoppingBagOpen`: A = cls( "shopping-bag-open" )
    val `shoppingCart`: A = cls( "shopping-cart" )
    val `shoppingCartSimple`: A = cls( "shopping-cart-simple" )
    val `shovel`: A = cls( "shovel" )
    val `shower`: A = cls( "shower" )
    val `shrimp`: A = cls( "shrimp" )
    val `shuffle`: A = cls( "shuffle" )
    val `shuffleAngular`: A = cls( "shuffle-angular" )
    val `shuffleSimple`: A = cls( "shuffle-simple" )
    val `sidebar`: A = cls( "sidebar" )
    val `sidebarSimple`: A = cls( "sidebar-simple" )
    val `sigma`: A = cls( "sigma" )
    val `signIn`: A = cls( "sign-in" )
    val `signOut`: A = cls( "sign-out" )
    val `signature`: A = cls( "signature" )
    val `signpost`: A = cls( "signpost" )
    val `simCard`: A = cls( "sim-card" )
    val `siren`: A = cls( "siren" )
    val `sketchLogo`: A = cls( "sketch-logo" )
    val `skipBack`: A = cls( "skip-back" )
    val `skipBackCircle`: A = cls( "skip-back-circle" )
    val `skipForward`: A = cls( "skip-forward" )
    val `skipForwardCircle`: A = cls( "skip-forward-circle" )
    val `skull`: A = cls( "skull" )
    val `skypeLogo`: A = cls( "skype-logo" )
    val `slackLogo`: A = cls( "slack-logo" )
    val `sliders`: A = cls( "sliders" )
    val `slidersHorizontal`: A = cls( "sliders-horizontal" )
    val `slideshow`: A = cls( "slideshow" )
    val `smiley`: A = cls( "smiley" )
    val `smileyAngry`: A = cls( "smiley-angry" )
    val `smileyBlank`: A = cls( "smiley-blank" )
    val `smileyMeh`: A = cls( "smiley-meh" )
    val `smileyMelting`: A = cls( "smiley-melting" )
    val `smileyNervous`: A = cls( "smiley-nervous" )
    val `smileySad`: A = cls( "smiley-sad" )
    val `smileySticker`: A = cls( "smiley-sticker" )
    val `smileyWink`: A = cls( "smiley-wink" )
    val `smileyXEyes`: A = cls( "smiley-x-eyes" )
    val `snapchatLogo`: A = cls( "snapchat-logo" )
    val `sneaker`: A = cls( "sneaker" )
    val `sneakerMove`: A = cls( "sneaker-move" )
    val `snowflake`: A = cls( "snowflake" )
    val `soccerBall`: A = cls( "soccer-ball" )
    val `sock`: A = cls( "sock" )
    val `solarPanel`: A = cls( "solar-panel" )
    val `solarRoof`: A = cls( "solar-roof" )
    val `sortAscending`: A = cls( "sort-ascending" )
    val `sortDescending`: A = cls( "sort-descending" )
    val `soundcloudLogo`: A = cls( "soundcloud-logo" )
    val `spade`: A = cls( "spade" )
    val `sparkle`: A = cls( "sparkle" )
    val `speakerHifi`: A = cls( "speaker-hifi" )
    val `speakerHigh`: A = cls( "speaker-high" )
    val `speakerLow`: A = cls( "speaker-low" )
    val `speakerNone`: A = cls( "speaker-none" )
    val `speakerSimpleHigh`: A = cls( "speaker-simple-high" )
    val `speakerSimpleLow`: A = cls( "speaker-simple-low" )
    val `speakerSimpleNone`: A = cls( "speaker-simple-none" )
    val `speakerSimpleSlash`: A = cls( "speaker-simple-slash" )
    val `speakerSimpleX`: A = cls( "speaker-simple-x" )
    val `speakerSlash`: A = cls( "speaker-slash" )
    val `speakerX`: A = cls( "speaker-x" )
    val `speedometer`: A = cls( "speedometer" )
    val `sphere`: A = cls( "sphere" )
    val `spinner`: A = cls( "spinner" )
    val `spinnerBall`: A = cls( "spinner-ball" )
    val `spinnerGap`: A = cls( "spinner-gap" )
    val `spiral`: A = cls( "spiral" )
    val `splitHorizontal`: A = cls( "split-horizontal" )
    val `splitVertical`: A = cls( "split-vertical" )
    val `spotifyLogo`: A = cls( "spotify-logo" )
    val `sprayBottle`: A = cls( "spray-bottle" )
    val `square`: A = cls( "square" )
    val `squareHalf`: A = cls( "square-half" )
    val `squareHalfBottom`: A = cls( "square-half-bottom" )
    val `squareLogo`: A = cls( "square-logo" )
    val `squareSplitHorizontal`: A = cls( "square-split-horizontal" )
    val `squareSplitVertical`: A = cls( "square-split-vertical" )
    val `squaresFour`: A = cls( "squares-four" )
    val `stack`: A = cls( "stack" )
    val `stackMinus`: A = cls( "stack-minus" )
    val `stackOverflowLogo`: A = cls( "stack-overflow-logo" )
    val `stackPlus`: A = cls( "stack-plus" )
    val `stackSimple`: A = cls( "stack-simple" )
    val `stairs`: A = cls( "stairs" )
    val `stamp`: A = cls( "stamp" )
    val `standardDefinition`: A = cls( "standard-definition" )
    val `star`: A = cls( "star" )
    val `starAndCrescent`: A = cls( "star-and-crescent" )
    val `starFour`: A = cls( "star-four" )
    val `starHalf`: A = cls( "star-half" )
    val `starOfDavid`: A = cls( "star-of-david" )
    val `steamLogo`: A = cls( "steam-logo" )
    val `steeringWheel`: A = cls( "steering-wheel" )
    val `steps`: A = cls( "steps" )
    val `stethoscope`: A = cls( "stethoscope" )
    val `sticker`: A = cls( "sticker" )
    val `stool`: A = cls( "stool" )
    val `stop`: A = cls( "stop" )
    val `stopCircle`: A = cls( "stop-circle" )
    val `storefront`: A = cls( "storefront" )
    val `strategy`: A = cls( "strategy" )
    val `stripeLogo`: A = cls( "stripe-logo" )
    val `student`: A = cls( "student" )
    val `subsetOf`: A = cls( "subset-of" )
    val `subsetProperOf`: A = cls( "subset-proper-of" )
    val `subtitles`: A = cls( "subtitles" )
    val `subtitlesSlash`: A = cls( "subtitles-slash" )
    val `subtract`: A = cls( "subtract" )
    val `subtractSquare`: A = cls( "subtract-square" )
    val `subway`: A = cls( "subway" )
    val `suitcase`: A = cls( "suitcase" )
    val `suitcaseRolling`: A = cls( "suitcase-rolling" )
    val `suitcaseSimple`: A = cls( "suitcase-simple" )
    val `sun`: A = cls( "sun" )
    val `sunDim`: A = cls( "sun-dim" )
    val `sunHorizon`: A = cls( "sun-horizon" )
    val `sunglasses`: A = cls( "sunglasses" )
    val `supersetOf`: A = cls( "superset-of" )
    val `supersetProperOf`: A = cls( "superset-proper-of" )
    val `swap`: A = cls( "swap" )
    val `swatches`: A = cls( "swatches" )
    val `swimmingPool`: A = cls( "swimming-pool" )
    val `sword`: A = cls( "sword" )
    val `synagogue`: A = cls( "synagogue" )
    val `syringe`: A = cls( "syringe" )
    val `tShirt`: A = cls( "t-shirt" )
    val `table`: A = cls( "table" )
    val `tabs`: A = cls( "tabs" )
    val `tag`: A = cls( "tag" )
    val `tagChevron`: A = cls( "tag-chevron" )
    val `tagSimple`: A = cls( "tag-simple" )
    val `target`: A = cls( "target" )
    val `taxi`: A = cls( "taxi" )
    val `teaBag`: A = cls( "tea-bag" )
    val `telegramLogo`: A = cls( "telegram-logo" )
    val `television`: A = cls( "television" )
    val `televisionSimple`: A = cls( "television-simple" )
    val `tennisBall`: A = cls( "tennis-ball" )
    val `tent`: A = cls( "tent" )
    val `terminal`: A = cls( "terminal" )
    val `terminalWindow`: A = cls( "terminal-window" )
    val `testTube`: A = cls( "test-tube" )
    val `textAUnderline`: A = cls( "text-a-underline" )
    val `textAa`: A = cls( "text-aa" )
    val `textAlignCenter`: A = cls( "text-align-center" )
    val `textAlignJustify`: A = cls( "text-align-justify" )
    val `textAlignLeft`: A = cls( "text-align-left" )
    val `textAlignRight`: A = cls( "text-align-right" )
    val `textB`: A = cls( "text-b" )
    val `textColumns`: A = cls( "text-columns" )
    val `textH`: A = cls( "text-h" )
    val `textHFive`: A = cls( "text-h-five" )
    val `textHFour`: A = cls( "text-h-four" )
    val `textHOne`: A = cls( "text-h-one" )
    val `textHSix`: A = cls( "text-h-six" )
    val `textHThree`: A = cls( "text-h-three" )
    val `textHTwo`: A = cls( "text-h-two" )
    val `textIndent`: A = cls( "text-indent" )
    val `textItalic`: A = cls( "text-italic" )
    val `textOutdent`: A = cls( "text-outdent" )
    val `textStrikethrough`: A = cls( "text-strikethrough" )
    val `textSubscript`: A = cls( "text-subscript" )
    val `textSuperscript`: A = cls( "text-superscript" )
    val `textT`: A = cls( "text-t" )
    val `textTSlash`: A = cls( "text-t-slash" )
    val `textUnderline`: A = cls( "text-underline" )
    val `textbox`: A = cls( "textbox" )
    val `thermometer`: A = cls( "thermometer" )
    val `thermometerCold`: A = cls( "thermometer-cold" )
    val `thermometerHot`: A = cls( "thermometer-hot" )
    val `thermometerSimple`: A = cls( "thermometer-simple" )
    val `threadsLogo`: A = cls( "threads-logo" )
    val `threeD`: A = cls( "three-d" )
    val `thumbsDown`: A = cls( "thumbs-down" )
    val `thumbsUp`: A = cls( "thumbs-up" )
    val `ticket`: A = cls( "ticket" )
    val `tidalLogo`: A = cls( "tidal-logo" )
    val `tiktokLogo`: A = cls( "tiktok-logo" )
    val `tilde`: A = cls( "tilde" )
    val `timer`: A = cls( "timer" )
    val `tipJar`: A = cls( "tip-jar" )
    val `tipi`: A = cls( "tipi" )
    val `tire`: A = cls( "tire" )
    val `toggleLeft`: A = cls( "toggle-left" )
    val `toggleRight`: A = cls( "toggle-right" )
    val `toilet`: A = cls( "toilet" )
    val `toiletPaper`: A = cls( "toilet-paper" )
    val `toolbox`: A = cls( "toolbox" )
    val `tooth`: A = cls( "tooth" )
    val `tornado`: A = cls( "tornado" )
    val `tote`: A = cls( "tote" )
    val `toteSimple`: A = cls( "tote-simple" )
    val `towel`: A = cls( "towel" )
    val `tractor`: A = cls( "tractor" )
    val `trademark`: A = cls( "trademark" )
    val `trademarkRegistered`: A = cls( "trademark-registered" )
    val `trafficCone`: A = cls( "traffic-cone" )
    val `trafficSign`: A = cls( "traffic-sign" )
    val `trafficSignal`: A = cls( "traffic-signal" )
    val `train`: A = cls( "train" )
    val `trainRegional`: A = cls( "train-regional" )
    val `trainSimple`: A = cls( "train-simple" )
    val `tram`: A = cls( "tram" )
    val `translate`: A = cls( "translate" )
    val `trash`: A = cls( "trash" )
    val `trashSimple`: A = cls( "trash-simple" )
    val `tray`: A = cls( "tray" )
    val `trayArrowDown`: A = cls( "tray-arrow-down" )
    val `trayArrowUp`: A = cls( "tray-arrow-up" )
    val `treasureChest`: A = cls( "treasure-chest" )
    val `tree`: A = cls( "tree" )
    val `treeEvergreen`: A = cls( "tree-evergreen" )
    val `treePalm`: A = cls( "tree-palm" )
    val `treeStructure`: A = cls( "tree-structure" )
    val `treeView`: A = cls( "tree-view" )
    val `trendDown`: A = cls( "trend-down" )
    val `trendUp`: A = cls( "trend-up" )
    val `triangle`: A = cls( "triangle" )
    val `triangleDashed`: A = cls( "triangle-dashed" )
    val `trolley`: A = cls( "trolley" )
    val `trolleySuitcase`: A = cls( "trolley-suitcase" )
    val `trophy`: A = cls( "trophy" )
    val `truck`: A = cls( "truck" )
    val `truckTrailer`: A = cls( "truck-trailer" )
    val `tumblrLogo`: A = cls( "tumblr-logo" )
    val `twitchLogo`: A = cls( "twitch-logo" )
    val `twitterLogo`: A = cls( "twitter-logo" )
    val `umbrella`: A = cls( "umbrella" )
    val `umbrellaSimple`: A = cls( "umbrella-simple" )
    val `union`: A = cls( "union" )
    val `unite`: A = cls( "unite" )
    val `uniteSquare`: A = cls( "unite-square" )
    val `upload`: A = cls( "upload" )
    val `uploadSimple`: A = cls( "upload-simple" )
    val `usb`: A = cls( "usb" )
    val `user`: A = cls( "user" )
    val `userCheck`: A = cls( "user-check" )
    val `userCircle`: A = cls( "user-circle" )
    val `userCircleCheck`: A = cls( "user-circle-check" )
    val `userCircleDashed`: A = cls( "user-circle-dashed" )
    val `userCircleGear`: A = cls( "user-circle-gear" )
    val `userCircleMinus`: A = cls( "user-circle-minus" )
    val `userCirclePlus`: A = cls( "user-circle-plus" )
    val `userFocus`: A = cls( "user-focus" )
    val `userGear`: A = cls( "user-gear" )
    val `userList`: A = cls( "user-list" )
    val `userMinus`: A = cls( "user-minus" )
    val `userPlus`: A = cls( "user-plus" )
    val `userRectangle`: A = cls( "user-rectangle" )
    val `userSound`: A = cls( "user-sound" )
    val `userSquare`: A = cls( "user-square" )
    val `userSwitch`: A = cls( "user-switch" )
    val `users`: A = cls( "users" )
    val `usersFour`: A = cls( "users-four" )
    val `usersThree`: A = cls( "users-three" )
    val `van`: A = cls( "van" )
    val `vault`: A = cls( "vault" )
    val `vectorThree`: A = cls( "vector-three" )
    val `vectorTwo`: A = cls( "vector-two" )
    val `vibrate`: A = cls( "vibrate" )
    val `video`: A = cls( "video" )
    val `videoCamera`: A = cls( "video-camera" )
    val `videoCameraSlash`: A = cls( "video-camera-slash" )
    val `videoConference`: A = cls( "video-conference" )
    val `vignette`: A = cls( "vignette" )
    val `vinylRecord`: A = cls( "vinyl-record" )
    val `virtualReality`: A = cls( "virtual-reality" )
    val `virus`: A = cls( "virus" )
    val `visor`: A = cls( "visor" )
    val `voicemail`: A = cls( "voicemail" )
    val `volleyball`: A = cls( "volleyball" )
    val `wall`: A = cls( "wall" )
    val `wallet`: A = cls( "wallet" )
    val `warehouse`: A = cls( "warehouse" )
    val `warning`: A = cls( "warning" )
    val `warningCircle`: A = cls( "warning-circle" )
    val `warningDiamond`: A = cls( "warning-diamond" )
    val `warningOctagon`: A = cls( "warning-octagon" )
    val `washingMachine`: A = cls( "washing-machine" )
    val `watch`: A = cls( "watch" )
    val `waveSawtooth`: A = cls( "wave-sawtooth" )
    val `waveSine`: A = cls( "wave-sine" )
    val `waveSquare`: A = cls( "wave-square" )
    val `waveTriangle`: A = cls( "wave-triangle" )
    val `waveform`: A = cls( "waveform" )
    val `waveformSlash`: A = cls( "waveform-slash" )
    val `waves`: A = cls( "waves" )
    val `webcam`: A = cls( "webcam" )
    val `webcamSlash`: A = cls( "webcam-slash" )
    val `webhooksLogo`: A = cls( "webhooks-logo" )
    val `wechatLogo`: A = cls( "wechat-logo" )
    val `whatsappLogo`: A = cls( "whatsapp-logo" )
    val `wheelchair`: A = cls( "wheelchair" )
    val `wheelchairMotion`: A = cls( "wheelchair-motion" )
    val `wifiHigh`: A = cls( "wifi-high" )
    val `wifiLow`: A = cls( "wifi-low" )
    val `wifiMedium`: A = cls( "wifi-medium" )
    val `wifiNone`: A = cls( "wifi-none" )
    val `wifiSlash`: A = cls( "wifi-slash" )
    val `wifiX`: A = cls( "wifi-x" )
    val `wind`: A = cls( "wind" )
    val `windmill`: A = cls( "windmill" )
    val `windowsLogo`: A = cls( "windows-logo" )
    val `wine`: A = cls( "wine" )
    val `wrench`: A = cls( "wrench" )
    val `x`: A = cls( "x" )
    val `xCircle`: A = cls( "x-circle" )
    val `xLogo`: A = cls( "x-logo" )
    val `xSquare`: A = cls( "x-square" )
    val `yarn`: A = cls( "yarn" )
    val `yinYang`: A = cls( "yin-yang" )
    val `youtubeLogo`: A = cls( "youtube-logo" )

  object bold extends Common:
    override protected def cls( name: String ): A = tcls( "bold", name )


  object regular extends Common:
    override protected def cls( name: String ): A = tcls( "regular", name )


  object fill extends Common:
    override protected def cls( name: String ): A = tcls( "fill", name )


  object duotone extends Common:
    override protected def cls( name: String ): A = tcls( "duotone", name )


  object light extends Common:
    override protected def cls( name: String ): A = tcls( "light", name )


  object thin extends Common:
    override protected def cls( name: String ): A = tcls( "thin", name )


