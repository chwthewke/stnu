////////////////////////////////////////
// GENERATED, DO NOT EDIT
//  see GenBulmaClasses

package net.chwthewke.stnu
package spa
package css

trait BulmaClasses[A]:
  def cls( name: String ): A
  
  //////////////////////
  // ELEMENTS
  //////////////////////
  // Block
  val block: A = cls( "block" )
  // Box
  val box: A = cls( "box" )
  // Button
  val button: A = cls( "button" )
  val buttons: A = cls( "buttons" )
  // Content
  val content: A = cls( "content" )
  // Delete
  val delete: A = cls( "delete" )
  // Icon
  val icon: A = cls( "icon" )
  val iconText: A = cls( "icon-text" )
  // Image
  val image: A = cls( "image" )
  //  sizes
  val is16x16: A = cls( "is-16x16" )
  val is24x24: A = cls( "is-24x24" )
  val is32x32: A = cls( "is-32x32" )
  val is48x48: A = cls( "is-48x48" )
  val is64x64: A = cls( "is-64x64" )
  val is96x96: A = cls( "is-96x96" )
  val is128x128: A = cls( "is-128x128" )
  //  aspect ratios
  val isSquare: A = cls( "is-square" )
  val is1by1: A = cls( "is-1by1" )
  val is5by4: A = cls( "is-5by4" )
  val is4by3: A = cls( "is-4by3" )
  val is3by2: A = cls( "is-3by2" )
  val is5by3: A = cls( "is-5by3" )
  val is16by9: A = cls( "is-16by9" )
  val is2by1: A = cls( "is-2by1" )
  val is3by1: A = cls( "is-3by1" )
  val is4by5: A = cls( "is-4by5" )
  val is3by4: A = cls( "is-3by4" )
  val is2by3: A = cls( "is-2by3" )
  val is3by5: A = cls( "is-3by5" )
  val is9by16: A = cls( "is-9by16" )
  val is1by2: A = cls( "is-1by2" )
  val is1by3: A = cls( "is-1by3" )
  // Notification
  val notification: A = cls( "notification" )
  // Progress Bar
  val progress: A = cls( "progress" )
  // Table
  val table: A = cls( "table" )
  val tableContainer: A = cls( "table-container" )
  val isBordered: A = cls( "is-bordered" )
  val isStriped: A = cls( "is-striped" )
  val isNarrow: A = cls( "is-narrow" )
  val isHoverable: A = cls( "is-hoverable" )
  // Tag
  val tag: A = cls( "tag" )
  val tags: A = cls( "tags" )
  val isDelete: A = cls( "is-delete" )
  // Title
  val title: A = cls( "title" )
  val subtitle: A = cls( "subtitle" )
  // Element colors
  val isWhite: A = cls( "is-white" )
  val isLight: A = cls( "is-light" )
  val isDark: A = cls( "is-dark" )
  val isBlack: A = cls( "is-black" )
  val isText: A = cls( "is-text" )
  val isGhost: A = cls( "is-ghost" )
  val isPrimary: A = cls( "is-primary" )
  val isLink: A = cls( "is-link" )
  val isInfo: A = cls( "is-info" )
  val isSuccess: A = cls( "is-success" )
  val isWarning: A = cls( "is-warning" )
  val isDanger: A = cls( "is-danger" )
  // Element sizes
  val isSmall: A = cls( "is-small" )
  val isNormal: A = cls( "is-normal" )
  val isMedium: A = cls( "is-medium" )
  val isLarge: A = cls( "is-large" )
  val areSmall: A = cls( "are-small" )
  val areMedium: A = cls( "are-medium" )
  val areLarge: A = cls( "are-large" )
  // Element styles
  val isOutlined: A = cls( "is-outlined" )
  val isInverted: A = cls( "is-inverted" )
  val isRounded: A = cls( "is-rounded" )
  // Element states
  val isActive: A = cls( "is-active" )
  val isFocused: A = cls( "is-focused" )
  val isHovered: A = cls( "is-hovered" )
  val isLoading: A = cls( "is-loading" )
  val isSelected: A = cls( "is-selected" )
  val isStatic: A = cls( "is-static" )
  //////////////////////
  // COMPONENTS
  //////////////////////
  // Breadcrumb
  val breadcrumb: A = cls( "breadcrumb" )
  val hasArrowSeparator: A = cls( "has-arrow-separator" )
  val hasBulletSeparator: A = cls( "has-bullet-separator" )
  val hasDotSeparator: A = cls( "has-dot-separator" )
  val hasSucceedsSeparator: A = cls( "has-succeeds-separator" )
  // Card
  val card: A = cls( "card" )
  val cardHeader: A = cls( "card-header" )
  val cardHeaderTitle: A = cls( "card-header-title" )
  val cardHeaderIcon: A = cls( "card-header-icon" )
  val cardImage: A = cls( "card-image" )
  val cardContent: A = cls( "card-content" )
  val cardFooter: A = cls( "card-footer" )
  val cardFooterItem: A = cls( "card-footer-item" )
  // Dropdown
  val dropdown: A = cls( "dropdown" )
  val dropdownTrigger: A = cls( "dropdown-trigger" )
  val dropdownMenu: A = cls( "dropdown-menu" )
  val dropdownContent: A = cls( "dropdown-content" )
  val dropdownItem: A = cls( "dropdown-item" )
  val dropdownDivider: A = cls( "dropdown-divider" )
  // Menu
  val menu: A = cls( "menu" )
  val menuLabel: A = cls( "menu-label" )
  val menuList: A = cls( "menu-list" )
  // Message
  val message: A = cls( "message" )
  val messageHeader: A = cls( "message-header" )
  val messageBody: A = cls( "message-body" )
  // Modal
  val modal: A = cls( "modal" )
  val modalBackground: A = cls( "modal-background" )
  val modalContent: A = cls( "modal-content" )
  val modalClose: A = cls( "modal-close" )
  val modalCard: A = cls( "modal-card" )
  val modalCardHead: A = cls( "modal-card-head" )
  val modalCardTitle: A = cls( "modal-card-title" )
  val modalCardBody: A = cls( "modal-card-body" )
  val modalCardFoot: A = cls( "modal-card-foot" )
  // Navbar
  val navbar: A = cls( "navbar" )
  val navbarBrand: A = cls( "navbar-brand" )
  val navbarBurger: A = cls( "navbar-burger" )
  val navbarMenu: A = cls( "navbar-menu" )
  val navbarStart: A = cls( "navbar-start" )
  val navbarEnd: A = cls( "navbar-end" )
  val navbarItem: A = cls( "navbar-item" )
  val navbarLink: A = cls( "navbar-link" )
  val navbarDropdown: A = cls( "navbar-dropdown" )
  val navbarDivider: A = cls( "navbar-divider" )
  val hasDropdown: A = cls( "has-dropdown" )
  val isTransparent: A = cls( "is-transparent" )
  val isFixedTop: A = cls( "is-fixed-top" )
  val isFixedBottom: A = cls( "is-fixed-bottom" )
  val hasNavbarFixedTop: A = cls( "has-navbar-fixed-top" )
  val hasNavbarFixedBottom: A = cls( "has-navbar-fixed-bottom" )
  // Pagination
  val paginationPrevious: A = cls( "pagination-previous" )
  val paginationNext: A = cls( "pagination-next" )
  val paginationList: A = cls( "pagination-list" )
  val paginationLink: A = cls( "pagination-link" )
  val paginationEllipsis: A = cls( "pagination-ellipsis" )
  // Panel
  val panel: A = cls( "panel" )
  val panelHeading: A = cls( "panel-heading" )
  val panelTabs: A = cls( "panel-tabs" )
  val panelBlock: A = cls( "panel-block" )
  // Tabs
  val tabs: A = cls( "tabs" )
  val isBoxed: A = cls( "is-boxed" )
  val isToggle: A = cls( "is-toggle" )
  val isToggleRounded: A = cls( "is-toggle-rounded" )
  // Form
  //  control
  val control: A = cls( "control" )
  val hasIconsLeft: A = cls( "has-icons-left" )
  val hasIconsRight: A = cls( "has-icons-right" )
  //  field
  val field: A = cls( "field" )
  val fieldLabel: A = cls( "field-label" )
  val fieldBody: A = cls( "field-body" )
  val label: A = cls( "label" )
  val input: A = cls( "input" )
  //  textarea
  val textarea: A = cls( "textarea" )
  val hasFixedSize: A = cls( "has-fixed-size" )
  //  select
  val select: A = cls( "select" )
  val isMultiple: A = cls( "is-multiple" )
  //  checkbox
  val checkbox: A = cls( "checkbox" )
  val checkboxes: A = cls( "checkboxes" )
  //  radio
  val radio: A = cls( "radio" )
  val radios: A = cls( "radios" )
  //  file
  val file: A = cls( "file" )
  val fileLabel: A = cls( "file-label" )
  val fileInput: A = cls( "file-input" )
  val fileCta: A = cls( "file-cta" )
  val fileIcon: A = cls( "file-icon" )
  val fileName: A = cls( "file-name" )
  val hasName: A = cls( "has-name" )
  val help: A = cls( "help" )
  // Columns
  val columns: A = cls( "columns" )
  val column: A = cls( "column" )
  val isMobile: A = cls( "is-mobile" )
  val isDesktop: A = cls( "is-desktop" )
  val isGapless: A = cls( "is-gapless" )
  val isMultiline: A = cls( "is-multiline" )
  val isVcentered: A = cls( "is-vcentered" )
  //  sizes
  val isThreeQuarters: A = cls( "is-three-quarters" )
  val isTwoThirds: A = cls( "is-two-thirds" )
  val isHalf: A = cls( "is-half" )
  val isOneThird: A = cls( "is-one-third" )
  val isOneQuarter: A = cls( "is-one-quarter" )
  val isFull: A = cls( "is-full" )
  val isFourFifths: A = cls( "is-four-fifths" )
  val isThreeFifths: A = cls( "is-three-fifths" )
  val isTwoFifths: A = cls( "is-two-fifths" )
  val isOneFifth: A = cls( "is-one-fifth" )
  //  offsets
  val isOffsetThreeQuarters: A = cls( "is-offset-three-quarters" )
  val isOffsetTwoThirds: A = cls( "is-offset-two-thirds" )
  val isOffsetHalf: A = cls( "is-offset-half" )
  val isOffsetOneThird: A = cls( "is-offset-one-third" )
  val isOffsetOneQuarter: A = cls( "is-offset-one-quarter" )
  val isOffsetFull: A = cls( "is-offset-full" )
  val isOffsetFourFifths: A = cls( "is-offset-four-fifths" )
  val isOffsetThreeFifths: A = cls( "is-offset-three-fifths" )
  val isOffsetTwoFifths: A = cls( "is-offset-two-fifths" )
  val isOffsetOneFifth: A = cls( "is-offset-one-fifth" )
  val isOffset1: A = cls( "is-offset-1" )
  val isOffset2: A = cls( "is-offset-2" )
  val isOffset3: A = cls( "is-offset-3" )
  val isOffset4: A = cls( "is-offset-4" )
  val isOffset5: A = cls( "is-offset-5" )
  val isOffset6: A = cls( "is-offset-6" )
  val isOffset7: A = cls( "is-offset-7" )
  val isOffset8: A = cls( "is-offset-8" )
  val isOffset9: A = cls( "is-offset-9" )
  val isOffset10: A = cls( "is-offset-10" )
  val isOffset11: A = cls( "is-offset-11" )
  val isOffset12: A = cls( "is-offset-12" )
  // Grid
  val grid: A = cls( "grid" )
  //  layout
  val isColMin1: A = cls( "is-col-min-1" )
  val isColMin2: A = cls( "is-col-min-2" )
  val isColMin3: A = cls( "is-col-min-3" )
  val isColMin4: A = cls( "is-col-min-4" )
  val isColMin5: A = cls( "is-col-min-5" )
  val isColMin6: A = cls( "is-col-min-6" )
  val isColMin7: A = cls( "is-col-min-7" )
  val isColMin8: A = cls( "is-col-min-8" )
  val isColMin9: A = cls( "is-col-min-9" )
  val isColMin10: A = cls( "is-col-min-10" )
  val isColMin11: A = cls( "is-col-min-11" )
  val isColMin12: A = cls( "is-col-min-12" )
  val isColMin13: A = cls( "is-col-min-13" )
  val isColMin14: A = cls( "is-col-min-14" )
  val isColMin15: A = cls( "is-col-min-15" )
  val isColMin16: A = cls( "is-col-min-16" )
  val isColMin17: A = cls( "is-col-min-17" )
  val isColMin18: A = cls( "is-col-min-18" )
  val isColMin19: A = cls( "is-col-min-19" )
  val isColMin20: A = cls( "is-col-min-20" )
  val isColMin21: A = cls( "is-col-min-21" )
  val isColMin22: A = cls( "is-col-min-22" )
  val isColMin23: A = cls( "is-col-min-23" )
  val isColMin24: A = cls( "is-col-min-24" )
  val isColMin25: A = cls( "is-col-min-25" )
  val isColMin26: A = cls( "is-col-min-26" )
  val isColMin27: A = cls( "is-col-min-27" )
  val isColMin28: A = cls( "is-col-min-28" )
  val isColMin29: A = cls( "is-col-min-29" )
  val isColMin30: A = cls( "is-col-min-30" )
  val isColMin31: A = cls( "is-col-min-31" )
  val isColMin32: A = cls( "is-col-min-32" )
  //  gaps
  val isGap0: A = cls( "is-gap-0" )
  val isColumnGap0: A = cls( "is-column-gap-0" )
  val isRowGap0: A = cls( "is-row-gap-0" )
  val isGap1: A = cls( "is-gap-1" )
  val isColumnGap1: A = cls( "is-column-gap-1" )
  val isRowGap1: A = cls( "is-row-gap-1" )
  val isGap2: A = cls( "is-gap-2" )
  val isColumnGap2: A = cls( "is-column-gap-2" )
  val isRowGap2: A = cls( "is-row-gap-2" )
  val isGap3: A = cls( "is-gap-3" )
  val isColumnGap3: A = cls( "is-column-gap-3" )
  val isRowGap3: A = cls( "is-row-gap-3" )
  val isGap4: A = cls( "is-gap-4" )
  val isColumnGap4: A = cls( "is-column-gap-4" )
  val isRowGap4: A = cls( "is-row-gap-4" )
  val isGap5: A = cls( "is-gap-5" )
  val isColumnGap5: A = cls( "is-column-gap-5" )
  val isRowGap5: A = cls( "is-row-gap-5" )
  val isGap6: A = cls( "is-gap-6" )
  val isColumnGap6: A = cls( "is-column-gap-6" )
  val isRowGap6: A = cls( "is-row-gap-6" )
  val isGap7: A = cls( "is-gap-7" )
  val isColumnGap7: A = cls( "is-column-gap-7" )
  val isRowGap7: A = cls( "is-row-gap-7" )
  val isGap8: A = cls( "is-gap-8" )
  val isColumnGap8: A = cls( "is-column-gap-8" )
  val isRowGap8: A = cls( "is-row-gap-8" )
  //  Fixed Grid
  val fixedGrid: A = cls( "fixed-grid" )
  val hasAutoCount: A = cls( "has-auto-count" )
  //   column count
  val has0Cols: A = cls( "has-0-cols" )
  val has1Cols: A = cls( "has-1-cols" )
  val has2Cols: A = cls( "has-2-cols" )
  val has3Cols: A = cls( "has-3-cols" )
  val has4Cols: A = cls( "has-4-cols" )
  val has5Cols: A = cls( "has-5-cols" )
  val has6Cols: A = cls( "has-6-cols" )
  val has7Cols: A = cls( "has-7-cols" )
  val has8Cols: A = cls( "has-8-cols" )
  val has9Cols: A = cls( "has-9-cols" )
  val has10Cols: A = cls( "has-10-cols" )
  val has11Cols: A = cls( "has-11-cols" )
  val has12Cols: A = cls( "has-12-cols" )
  //  Grid cells
  val cell: A = cls( "cell" )
  //   positioning
  val isColStart1: A = cls( "is-col-start-1" )
  val isColStart2: A = cls( "is-col-start-2" )
  val isColStart3: A = cls( "is-col-start-3" )
  val isColStart4: A = cls( "is-col-start-4" )
  val isColFromEnd1: A = cls( "is-col-from-end-1" )
  val isColFromEnd2: A = cls( "is-col-from-end-2" )
  val isColFromEnd3: A = cls( "is-col-from-end-3" )
  val isColFromEnd4: A = cls( "is-col-from-end-4" )
  val isColSpan1: A = cls( "is-col-span-1" )
  val isColSpan2: A = cls( "is-col-span-2" )
  val isColSpan3: A = cls( "is-col-span-3" )
  val isColSpan4: A = cls( "is-col-span-4" )
  val isRowStart1: A = cls( "is-row-start-1" )
  val isRowStart2: A = cls( "is-row-start-2" )
  val isRowStart3: A = cls( "is-row-start-3" )
  val isRowStart4: A = cls( "is-row-start-4" )
  val isRowFromEnd1: A = cls( "is-row-from-end-1" )
  val isRowFromEnd2: A = cls( "is-row-from-end-2" )
  val isRowFromEnd3: A = cls( "is-row-from-end-3" )
  val isRowFromEnd4: A = cls( "is-row-from-end-4" )
  val isRowSpan1: A = cls( "is-row-span-1" )
  val isRowSpan2: A = cls( "is-row-span-2" )
  val isRowSpan3: A = cls( "is-row-span-3" )
  val isRowSpan4: A = cls( "is-row-span-4" )
  // Layout
  //  Container
  val container: A = cls( "container" )
  val isFluid: A = cls( "is-fluid" )
  //  Hero
  val hero: A = cls( "hero" )
  val heroHead: A = cls( "hero-head" )
  val heroBody: A = cls( "hero-body" )
  val heroFoot: A = cls( "hero-foot" )
  //  Section
  val section: A = cls( "section" )
  //  Level
  val level: A = cls( "level" )
  val levelLeft: A = cls( "level-left" )
  val levelRight: A = cls( "level-right" )
  val levelItem: A = cls( "level-item" )
  //  Media
  val media: A = cls( "media" )
  val mediaLeft: A = cls( "media-left" )
  val mediaRight: A = cls( "media-right" )
  val mediaContent: A = cls( "media-content" )
  //  Footer
  val footer: A = cls( "footer" )
  //////////////////////
  // OTHER
  //////////////////////
  // Theme
  val themeDark: A = cls( "theme-dark" )
  val themeLight: A = cls( "theme-light" )
  // Layout
  val isHorizontal: A = cls( "is-horizontal" )
  val isResponsive: A = cls( "is-responsive" )
  val isTab: A = cls( "is-tab" )
  val isExpanded: A = cls( "is-expanded" )
  val isFullwidth: A = cls( "is-fullwidth" )
  val isGrouped: A = cls( "is-grouped" )
  val isGroupedCentered: A = cls( "is-grouped-centered" )
  val isGroupedRight: A = cls( "is-grouped-right" )
  val isGroupedMultiline: A = cls( "is-grouped-multiline" )
  val isSpaced: A = cls( "is-spaced" )
  val isCentered: A = cls( "is-centered" )
  val isLeft: A = cls( "is-left" )
  val isRight: A = cls( "is-right" )
  val isUp: A = cls( "is-up" )
  val hasAddons: A = cls( "has-addons" )
  val hasAddonsCentered: A = cls( "has-addons-centered" )
  val hasAddonsRight: A = cls( "has-addons-right" )
  val hasRatio: A = cls( "has-ratio" )
  // Sizes
  val is1: A = cls( "is-1" )
  val is2: A = cls( "is-2" )
  val is3: A = cls( "is-3" )
  val is4: A = cls( "is-4" )
  val is5: A = cls( "is-5" )
  val is6: A = cls( "is-6" )
  val is7: A = cls( "is-7" )
  val is8: A = cls( "is-8" )
  val is9: A = cls( "is-9" )
  val is10: A = cls( "is-10" )
  val is11: A = cls( "is-11" )
  val is12: A = cls( "is-12" )
  // Style
  val hasShadow: A = cls( "has-shadow" )
  // Text colors
  val hasTextWhite: A = cls( "has-text-white" )
  val hasTextBlack: A = cls( "has-text-black" )
  val hasTextLight: A = cls( "has-text-light" )
  val hasTextDark: A = cls( "has-text-dark" )
  val hasTextPrimary: A = cls( "has-text-primary" )
  val hasTextLink: A = cls( "has-text-link" )
  val hasTextInfo: A = cls( "has-text-info" )
  val hasTextSuccess: A = cls( "has-text-success" )
  val hasTextWarning: A = cls( "has-text-warning" )
  val hasTextDanger: A = cls( "has-text-danger" )
  val hasTextBlackBis: A = cls( "has-text-black-bis" )
  val hasTextBlackTer: A = cls( "has-text-black-ter" )
  val hasTextGreyDarker: A = cls( "has-text-grey-darker" )
  val hasTextGreyDark: A = cls( "has-text-grey-dark" )
  val hasTextGrey: A = cls( "has-text-grey" )
  val hasTextGreyLight: A = cls( "has-text-grey-light" )
  val hasTextGreyLighter: A = cls( "has-text-grey-lighter" )
  val hasTextWhiteTer: A = cls( "has-text-white-ter" )
  val hasTextWhiteBis: A = cls( "has-text-white-bis" )
  val hasTextPrimaryLight: A = cls( "has-text-primary-light" )
  val hasTextLinkLight: A = cls( "has-text-link-light" )
  val hasTextInfoLight: A = cls( "has-text-info-light" )
  val hasTextSuccessLight: A = cls( "has-text-success-light" )
  val hasTextWarningLight: A = cls( "has-text-warning-light" )
  val hasTextDangerLight: A = cls( "has-text-danger-light" )
  val hasTextPrimaryDark: A = cls( "has-text-primary-dark" )
  val hasTextLinkDark: A = cls( "has-text-link-dark" )
  val hasTextInfoDark: A = cls( "has-text-info-dark" )
  val hasTextSuccessDark: A = cls( "has-text-success-dark" )
  val hasTextWarningDark: A = cls( "has-text-warning-dark" )
  val hasTextDangerDark: A = cls( "has-text-danger-dark" )
  val hasTextCurrent: A = cls( "has-text-current" )
  val hasTextInherit: A = cls( "has-text-inherit" )
  // Background colors
  val hasBackgroundWhite: A = cls( "has-background-white" )
  val hasBackgroundBlack: A = cls( "has-background-black" )
  val hasBackgroundLight: A = cls( "has-background-light" )
  val hasBackgroundDark: A = cls( "has-background-dark" )
  val hasBackgroundPrimary: A = cls( "has-background-primary" )
  val hasBackgroundLink: A = cls( "has-background-link" )
  val hasBackgroundInfo: A = cls( "has-background-info" )
  val hasBackgroundSuccess: A = cls( "has-background-success" )
  val hasBackgroundWarning: A = cls( "has-background-warning" )
  val hasBackgroundDanger: A = cls( "has-background-danger" )
  val hasBackgroundBlackBis: A = cls( "has-background-black-bis" )
  val hasBackgroundBlackTer: A = cls( "has-background-black-ter" )
  val hasBackgroundGreyDarker: A = cls( "has-background-grey-darker" )
  val hasBackgroundGreyDark: A = cls( "has-background-grey-dark" )
  val hasBackgroundGrey: A = cls( "has-background-grey" )
  val hasBackgroundGreyLight: A = cls( "has-background-grey-light" )
  val hasBackgroundGreyLighter: A = cls( "has-background-grey-lighter" )
  val hasBackgroundWhiteTer: A = cls( "has-background-white-ter" )
  val hasBackgroundWhiteBis: A = cls( "has-background-white-bis" )
  val hasBackgroundPrimaryLight: A = cls( "has-background-primary-light" )
  val hasBackgroundLinkLight: A = cls( "has-background-link-light" )
  val hasBackgroundInfoLight: A = cls( "has-background-info-light" )
  val hasBackgroundSuccessLight: A = cls( "has-background-success-light" )
  val hasBackgroundWarningLight: A = cls( "has-background-warning-light" )
  val hasBackgroundDangerLight: A = cls( "has-background-danger-light" )
  val hasBackgroundPrimaryDark: A = cls( "has-background-primary-dark" )
  val hasBackgroundLinkDark: A = cls( "has-background-link-dark" )
  val hasBackgroundInfoDark: A = cls( "has-background-info-dark" )
  val hasBackgroundSuccessDark: A = cls( "has-background-success-dark" )
  val hasBackgroundWarningDark: A = cls( "has-background-warning-dark" )
  val hasBackgroundDangerDark: A = cls( "has-background-danger-dark" )
  val hasBackgroundCurrent: A = cls( "has-background-current" )
  val hasBackgroundInherit: A = cls( "has-background-inherit" )
  // Spacing
  val m0: A = cls( "m-0" )
  val m1: A = cls( "m-1" )
  val m2: A = cls( "m-2" )
  val m3: A = cls( "m-3" )
  val m4: A = cls( "m-4" )
  val m5: A = cls( "m-5" )
  val m6: A = cls( "m-6" )
  val mAuto: A = cls( "m-auto" )
  val mt0: A = cls( "mt-0" )
  val mt1: A = cls( "mt-1" )
  val mt2: A = cls( "mt-2" )
  val mt3: A = cls( "mt-3" )
  val mt4: A = cls( "mt-4" )
  val mt5: A = cls( "mt-5" )
  val mt6: A = cls( "mt-6" )
  val mtAuto: A = cls( "mt-auto" )
  val mr0: A = cls( "mr-0" )
  val mr1: A = cls( "mr-1" )
  val mr2: A = cls( "mr-2" )
  val mr3: A = cls( "mr-3" )
  val mr4: A = cls( "mr-4" )
  val mr5: A = cls( "mr-5" )
  val mr6: A = cls( "mr-6" )
  val mrAuto: A = cls( "mr-auto" )
  val mb0: A = cls( "mb-0" )
  val mb1: A = cls( "mb-1" )
  val mb2: A = cls( "mb-2" )
  val mb3: A = cls( "mb-3" )
  val mb4: A = cls( "mb-4" )
  val mb5: A = cls( "mb-5" )
  val mb6: A = cls( "mb-6" )
  val mbAuto: A = cls( "mb-auto" )
  val ml0: A = cls( "ml-0" )
  val ml1: A = cls( "ml-1" )
  val ml2: A = cls( "ml-2" )
  val ml3: A = cls( "ml-3" )
  val ml4: A = cls( "ml-4" )
  val ml5: A = cls( "ml-5" )
  val ml6: A = cls( "ml-6" )
  val mlAuto: A = cls( "ml-auto" )
  val mx0: A = cls( "mx-0" )
  val mx1: A = cls( "mx-1" )
  val mx2: A = cls( "mx-2" )
  val mx3: A = cls( "mx-3" )
  val mx4: A = cls( "mx-4" )
  val mx5: A = cls( "mx-5" )
  val mx6: A = cls( "mx-6" )
  val mxAuto: A = cls( "mx-auto" )
  val my0: A = cls( "my-0" )
  val my1: A = cls( "my-1" )
  val my2: A = cls( "my-2" )
  val my3: A = cls( "my-3" )
  val my4: A = cls( "my-4" )
  val my5: A = cls( "my-5" )
  val my6: A = cls( "my-6" )
  val myAuto: A = cls( "my-auto" )
  val p0: A = cls( "p-0" )
  val p1: A = cls( "p-1" )
  val p2: A = cls( "p-2" )
  val p3: A = cls( "p-3" )
  val p4: A = cls( "p-4" )
  val p5: A = cls( "p-5" )
  val p6: A = cls( "p-6" )
  val pAuto: A = cls( "p-auto" )
  val pt0: A = cls( "pt-0" )
  val pt1: A = cls( "pt-1" )
  val pt2: A = cls( "pt-2" )
  val pt3: A = cls( "pt-3" )
  val pt4: A = cls( "pt-4" )
  val pt5: A = cls( "pt-5" )
  val pt6: A = cls( "pt-6" )
  val ptAuto: A = cls( "pt-auto" )
  val pr0: A = cls( "pr-0" )
  val pr1: A = cls( "pr-1" )
  val pr2: A = cls( "pr-2" )
  val pr3: A = cls( "pr-3" )
  val pr4: A = cls( "pr-4" )
  val pr5: A = cls( "pr-5" )
  val pr6: A = cls( "pr-6" )
  val prAuto: A = cls( "pr-auto" )
  val pb0: A = cls( "pb-0" )
  val pb1: A = cls( "pb-1" )
  val pb2: A = cls( "pb-2" )
  val pb3: A = cls( "pb-3" )
  val pb4: A = cls( "pb-4" )
  val pb5: A = cls( "pb-5" )
  val pb6: A = cls( "pb-6" )
  val pbAuto: A = cls( "pb-auto" )
  val pl0: A = cls( "pl-0" )
  val pl1: A = cls( "pl-1" )
  val pl2: A = cls( "pl-2" )
  val pl3: A = cls( "pl-3" )
  val pl4: A = cls( "pl-4" )
  val pl5: A = cls( "pl-5" )
  val pl6: A = cls( "pl-6" )
  val plAuto: A = cls( "pl-auto" )
  val px0: A = cls( "px-0" )
  val px1: A = cls( "px-1" )
  val px2: A = cls( "px-2" )
  val px3: A = cls( "px-3" )
  val px4: A = cls( "px-4" )
  val px5: A = cls( "px-5" )
  val px6: A = cls( "px-6" )
  val pxAuto: A = cls( "px-auto" )
  val py0: A = cls( "py-0" )
  val py1: A = cls( "py-1" )
  val py2: A = cls( "py-2" )
  val py3: A = cls( "py-3" )
  val py4: A = cls( "py-4" )
  val py5: A = cls( "py-5" )
  val py6: A = cls( "py-6" )
  val pyAuto: A = cls( "py-auto" )
  // Typography
  //  sizes
  val isSize1: A = cls( "is-size-1" )
  val isSize2: A = cls( "is-size-2" )
  val isSize3: A = cls( "is-size-3" )
  val isSize4: A = cls( "is-size-4" )
  val isSize5: A = cls( "is-size-5" )
  val isSize6: A = cls( "is-size-6" )
  val isSize7: A = cls( "is-size-7" )
  //  layout
  val hasTextCentered: A = cls( "has-text-centered" )
  val hasTextJustified: A = cls( "has-text-justified" )
  val hasTextLeft: A = cls( "has-text-left" )
  val hasTextRight: A = cls( "has-text-right" )
  //  text transformation
  val isCapitalized: A = cls( "is-capitalized" )
  val isLowercase: A = cls( "is-lowercase" )
  val isUppercase: A = cls( "is-uppercase" )
  val isItalic: A = cls( "is-italic" )
  val isUnderlined: A = cls( "is-underlined" )
  //  text weight
  val hasTextWeightLight: A = cls( "has-text-weight-light" )
  val hasTextWeightNormal: A = cls( "has-text-weight-normal" )
  val hasTextWeightMedium: A = cls( "has-text-weight-medium" )
  val hasTextWeightSemibold: A = cls( "has-text-weight-semibold" )
  val hasTextWeightBold: A = cls( "has-text-weight-bold" )
  val hasTextWeightExtrabold: A = cls( "has-text-weight-extrabold" )
  //  font family
  val isFamilySansSerif: A = cls( "is-family-sans-serif" )
  val isFamilyMonospace: A = cls( "is-family-monospace" )
  val isFamilyPrimary: A = cls( "is-family-primary" )
  val isFamilySecondary: A = cls( "is-family-secondary" )
  val isFamilyCode: A = cls( "is-family-code" )
  // Visibility
  val isBlock: A = cls( "is-block" )
  val isFlex: A = cls( "is-flex" )
  val isInline: A = cls( "is-inline" )
  val isInlineBlock: A = cls( "is-inline-block" )
  val isInlineFlex: A = cls( "is-inline-flex" )
  // Flexbox
  //  flex-direction
  val isFlexDirectionRow: A = cls( "is-flex-direction-row" )
  val isFlexDirectionRowReverse: A = cls( "is-flex-direction-row-reverse" )
  val isFlexDirectionColumn: A = cls( "is-flex-direction-column" )
  val isFlexDirectionColumnReverse: A = cls( "is-flex-direction-column-reverse" )
  //  flex-wrap
  val isFlexWrapNowrap: A = cls( "is-flex-wrap-nowrap" )
  val isFlexWrapWrap: A = cls( "is-flex-wrap-wrap" )
  val isFlexWrapWrapReverse: A = cls( "is-flex-wrap-wrap-reverse" )
  //  justify-content
  val isJustifyContentFlexStart: A = cls( "is-justify-content-flex-start" )
  val isJustifyContentFlexEnd: A = cls( "is-justify-content-flex-end" )
  val isJustifyContentCenter: A = cls( "is-justify-content-center" )
  val isJustifyContentSpaceBetween: A = cls( "is-justify-content-space-between" )
  val isJustifyContentSpaceAround: A = cls( "is-justify-content-space-around" )
  val isJustifyContentSpaceEvenly: A = cls( "is-justify-content-space-evenly" )
  val isJustifyContentStart: A = cls( "is-justify-content-start" )
  val isJustifyContentEnd: A = cls( "is-justify-content-end" )
  val isJustifyContentLeft: A = cls( "is-justify-content-left" )
  val isJustifyContentRight: A = cls( "is-justify-content-right" )
  //  align-content
  val isAlignContentFlexStart: A = cls( "is-align-content-flex-start" )
  val isAlignContentFlexEnd: A = cls( "is-align-content-flex-end" )
  val isAlignContentCenter: A = cls( "is-align-content-center" )
  val isAlignContentSpaceBetween: A = cls( "is-align-content-space-between" )
  val isAlignContentSpaceAround: A = cls( "is-align-content-space-around" )
  val isAlignContentSpaceEvenly: A = cls( "is-align-content-space-evenly" )
  val isAlignContentStretch: A = cls( "is-align-content-stretch" )
  val isAlignContentStart: A = cls( "is-align-content-start" )
  val isAlignContentEnd: A = cls( "is-align-content-end" )
  val isAlignContentBaseline: A = cls( "is-align-content-baseline" )
  //  align-items
  val isAlignItemsStretch: A = cls( "is-align-items-stretch" )
  val isAlignItemsFlexStart: A = cls( "is-align-items-flex-start" )
  val isAlignItemsFlexEnd: A = cls( "is-align-items-flex-end" )
  val isAlignItemsCenter: A = cls( "is-align-items-center" )
  val isAlignItemsBaseline: A = cls( "is-align-items-baseline" )
  val isAlignItemsStart: A = cls( "is-align-items-start" )
  val isAlignItemsEnd: A = cls( "is-align-items-end" )
  val isAlignItemsSelfStart: A = cls( "is-align-items-self-start" )
  val isAlignItemsSelfEnd: A = cls( "is-align-items-self-end" )
  //  align-self
  val isAlignSelfAuto: A = cls( "is-align-self-auto" )
  val isAlignSelfFlexStart: A = cls( "is-align-self-flex-start" )
  val isAlignSelfFlexEnd: A = cls( "is-align-self-flex-end" )
  val isAlignSelfFlexCenter: A = cls( "is-align-self-flex-center" )
  val isAlignSelfFlexBaseline: A = cls( "is-align-self-flex-baseline" )
  val isAlignSelfFlexStretch: A = cls( "is-align-self-flex-stretch" )
  //  flex-grow
  val isFlexGrow0: A = cls( "is-flex-grow-0" )
  val isFlexGrow1: A = cls( "is-flex-grow-1" )
  val isFlexGrow2: A = cls( "is-flex-grow-2" )
  val isFlexGrow3: A = cls( "is-flex-grow-3" )
  val isFlexGrow4: A = cls( "is-flex-grow-4" )
  val isFlexGrow5: A = cls( "is-flex-grow-5" )
  //  flex-shrink
  val isFlexShrink0: A = cls( "is-flex-shrink-0" )
  val isFlexShrink1: A = cls( "is-flex-shrink-1" )
  val isFlexShrink2: A = cls( "is-flex-shrink-2" )
  val isFlexShrink3: A = cls( "is-flex-shrink-3" )
  val isFlexShrink4: A = cls( "is-flex-shrink-4" )
  val isFlexShrink5: A = cls( "is-flex-shrink-5" )
